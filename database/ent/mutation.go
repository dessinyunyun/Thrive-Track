// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/activation_token"
	"go-gin/database/ent/example"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/predicate"
	"go-gin/database/ent/question"
	"go-gin/database/ent/question_category"
	"go-gin/database/ent/token"
	"go-gin/database/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActivationToken  = "Activation_token"
	TypeExample          = "Example"
	TypeFormResponse     = "Form_Response"
	TypeHistoryAnswer    = "History_Answer"
	TypeQuestion         = "Question"
	TypeQuestionCategory = "Question_Category"
	TypeToken            = "Token"
	TypeUser             = "User"
)

// ActivationTokenMutation represents an operation that mutates the Activation_token nodes in the graph.
type ActivationTokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	token         *string
	isused        *bool
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Activation_token, error)
	predicates    []predicate.Activation_token
}

var _ ent.Mutation = (*ActivationTokenMutation)(nil)

// activationTokenOption allows management of the mutation configuration using functional options.
type activationTokenOption func(*ActivationTokenMutation)

// newActivationTokenMutation creates new mutation for the Activation_token entity.
func newActivationTokenMutation(c config, op Op, opts ...activationTokenOption) *ActivationTokenMutation {
	m := &ActivationTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeActivationToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActivation_tokenID sets the ID field of the mutation.
func withActivation_tokenID(id uuid.UUID) activationTokenOption {
	return func(m *ActivationTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *Activation_token
		)
		m.oldValue = func(ctx context.Context) (*Activation_token, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Activation_token.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActivation_token sets the old Activation_token of the mutation.
func withActivation_token(node *Activation_token) activationTokenOption {
	return func(m *ActivationTokenMutation) {
		m.oldValue = func(context.Context) (*Activation_token, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActivationTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActivationTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Activation_token entities.
func (m *ActivationTokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActivationTokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActivationTokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Activation_token.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ActivationTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ActivationTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Activation_token entity.
// If the Activation_token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivationTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ActivationTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ActivationTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ActivationTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Activation_token entity.
// If the Activation_token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivationTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ActivationTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ActivationTokenMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ActivationTokenMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Activation_token entity.
// If the Activation_token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivationTokenMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ActivationTokenMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[activation_token.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ActivationTokenMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[activation_token.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ActivationTokenMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, activation_token.FieldDeletedAt)
}

// SetUserID sets the "user_id" field.
func (m *ActivationTokenMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ActivationTokenMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Activation_token entity.
// If the Activation_token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivationTokenMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ActivationTokenMutation) ResetUserID() {
	m.user = nil
}

// SetToken sets the "token" field.
func (m *ActivationTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *ActivationTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Activation_token entity.
// If the Activation_token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivationTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *ActivationTokenMutation) ResetToken() {
	m.token = nil
}

// SetIsused sets the "isused" field.
func (m *ActivationTokenMutation) SetIsused(b bool) {
	m.isused = &b
}

// Isused returns the value of the "isused" field in the mutation.
func (m *ActivationTokenMutation) Isused() (r bool, exists bool) {
	v := m.isused
	if v == nil {
		return
	}
	return *v, true
}

// OldIsused returns the old "isused" field's value of the Activation_token entity.
// If the Activation_token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivationTokenMutation) OldIsused(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsused is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsused requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsused: %w", err)
	}
	return oldValue.Isused, nil
}

// ResetIsused resets all changes to the "isused" field.
func (m *ActivationTokenMutation) ResetIsused() {
	m.isused = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ActivationTokenMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[activation_token.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ActivationTokenMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ActivationTokenMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ActivationTokenMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ActivationTokenMutation builder.
func (m *ActivationTokenMutation) Where(ps ...predicate.Activation_token) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActivationTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActivationTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Activation_token, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActivationTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActivationTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Activation_token).
func (m *ActivationTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActivationTokenMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, activation_token.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, activation_token.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, activation_token.FieldDeletedAt)
	}
	if m.user != nil {
		fields = append(fields, activation_token.FieldUserID)
	}
	if m.token != nil {
		fields = append(fields, activation_token.FieldToken)
	}
	if m.isused != nil {
		fields = append(fields, activation_token.FieldIsused)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActivationTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case activation_token.FieldCreatedAt:
		return m.CreatedAt()
	case activation_token.FieldUpdatedAt:
		return m.UpdatedAt()
	case activation_token.FieldDeletedAt:
		return m.DeletedAt()
	case activation_token.FieldUserID:
		return m.UserID()
	case activation_token.FieldToken:
		return m.Token()
	case activation_token.FieldIsused:
		return m.Isused()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActivationTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case activation_token.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case activation_token.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case activation_token.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case activation_token.FieldUserID:
		return m.OldUserID(ctx)
	case activation_token.FieldToken:
		return m.OldToken(ctx)
	case activation_token.FieldIsused:
		return m.OldIsused(ctx)
	}
	return nil, fmt.Errorf("unknown Activation_token field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivationTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case activation_token.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case activation_token.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case activation_token.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case activation_token.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case activation_token.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case activation_token.FieldIsused:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsused(v)
		return nil
	}
	return fmt.Errorf("unknown Activation_token field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActivationTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActivationTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivationTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Activation_token numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActivationTokenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(activation_token.FieldDeletedAt) {
		fields = append(fields, activation_token.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActivationTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActivationTokenMutation) ClearField(name string) error {
	switch name {
	case activation_token.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Activation_token nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActivationTokenMutation) ResetField(name string) error {
	switch name {
	case activation_token.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case activation_token.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case activation_token.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case activation_token.FieldUserID:
		m.ResetUserID()
		return nil
	case activation_token.FieldToken:
		m.ResetToken()
		return nil
	case activation_token.FieldIsused:
		m.ResetIsused()
		return nil
	}
	return fmt.Errorf("unknown Activation_token field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActivationTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, activation_token.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActivationTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case activation_token.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActivationTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActivationTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActivationTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, activation_token.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActivationTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case activation_token.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActivationTokenMutation) ClearEdge(name string) error {
	switch name {
	case activation_token.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Activation_token unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActivationTokenMutation) ResetEdge(name string) error {
	switch name {
	case activation_token.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Activation_token edge %s", name)
}

// ExampleMutation represents an operation that mutates the Example nodes in the graph.
type ExampleMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	name          *string
	username      *string
	email         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Example, error)
	predicates    []predicate.Example
}

var _ ent.Mutation = (*ExampleMutation)(nil)

// exampleOption allows management of the mutation configuration using functional options.
type exampleOption func(*ExampleMutation)

// newExampleMutation creates new mutation for the Example entity.
func newExampleMutation(c config, op Op, opts ...exampleOption) *ExampleMutation {
	m := &ExampleMutation{
		config:        c,
		op:            op,
		typ:           TypeExample,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExampleID sets the ID field of the mutation.
func withExampleID(id uuid.UUID) exampleOption {
	return func(m *ExampleMutation) {
		var (
			err   error
			once  sync.Once
			value *Example
		)
		m.oldValue = func(ctx context.Context) (*Example, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Example.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExample sets the old Example of the mutation.
func withExample(node *Example) exampleOption {
	return func(m *ExampleMutation) {
		m.oldValue = func(context.Context) (*Example, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExampleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExampleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Example entities.
func (m *ExampleMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExampleMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExampleMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Example.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExampleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExampleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Example entity.
// If the Example object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExampleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExampleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExampleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExampleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Example entity.
// If the Example object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExampleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExampleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ExampleMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ExampleMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Example entity.
// If the Example object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExampleMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ExampleMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[example.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ExampleMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[example.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ExampleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, example.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *ExampleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExampleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Example entity.
// If the Example object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExampleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExampleMutation) ResetName() {
	m.name = nil
}

// SetUsername sets the "username" field.
func (m *ExampleMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *ExampleMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Example entity.
// If the Example object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExampleMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *ExampleMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *ExampleMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *ExampleMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Example entity.
// If the Example object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExampleMutation) OldEmail(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *ExampleMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[example.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *ExampleMutation) EmailCleared() bool {
	_, ok := m.clearedFields[example.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *ExampleMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, example.FieldEmail)
}

// Where appends a list predicates to the ExampleMutation builder.
func (m *ExampleMutation) Where(ps ...predicate.Example) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExampleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExampleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Example, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExampleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExampleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Example).
func (m *ExampleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExampleMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, example.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, example.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, example.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, example.FieldName)
	}
	if m.username != nil {
		fields = append(fields, example.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, example.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExampleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case example.FieldCreatedAt:
		return m.CreatedAt()
	case example.FieldUpdatedAt:
		return m.UpdatedAt()
	case example.FieldDeletedAt:
		return m.DeletedAt()
	case example.FieldName:
		return m.Name()
	case example.FieldUsername:
		return m.Username()
	case example.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExampleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case example.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case example.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case example.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case example.FieldName:
		return m.OldName(ctx)
	case example.FieldUsername:
		return m.OldUsername(ctx)
	case example.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown Example field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExampleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case example.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case example.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case example.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case example.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case example.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case example.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown Example field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExampleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExampleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExampleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Example numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExampleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(example.FieldDeletedAt) {
		fields = append(fields, example.FieldDeletedAt)
	}
	if m.FieldCleared(example.FieldEmail) {
		fields = append(fields, example.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExampleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExampleMutation) ClearField(name string) error {
	switch name {
	case example.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case example.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown Example nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExampleMutation) ResetField(name string) error {
	switch name {
	case example.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case example.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case example.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case example.FieldName:
		m.ResetName()
		return nil
	case example.FieldUsername:
		m.ResetUsername()
		return nil
	case example.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown Example field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExampleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExampleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExampleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExampleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExampleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExampleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExampleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Example unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExampleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Example edge %s", name)
}

// FormResponseMutation represents an operation that mutates the Form_Response nodes in the graph.
type FormResponseMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	created_at             *time.Time
	updated_at             *time.Time
	deleted_at             *time.Time
	total_score            *uint8
	addtotal_score         *int8
	depression_level       *string
	clearedFields          map[string]struct{}
	history_answers        map[int]struct{}
	removedhistory_answers map[int]struct{}
	clearedhistory_answers bool
	user                   *uuid.UUID
	cleareduser            bool
	done                   bool
	oldValue               func(context.Context) (*Form_Response, error)
	predicates             []predicate.Form_Response
}

var _ ent.Mutation = (*FormResponseMutation)(nil)

// formResponseOption allows management of the mutation configuration using functional options.
type formResponseOption func(*FormResponseMutation)

// newFormResponseMutation creates new mutation for the Form_Response entity.
func newFormResponseMutation(c config, op Op, opts ...formResponseOption) *FormResponseMutation {
	m := &FormResponseMutation{
		config:        c,
		op:            op,
		typ:           TypeFormResponse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withForm_ResponseID sets the ID field of the mutation.
func withForm_ResponseID(id int) formResponseOption {
	return func(m *FormResponseMutation) {
		var (
			err   error
			once  sync.Once
			value *Form_Response
		)
		m.oldValue = func(ctx context.Context) (*Form_Response, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Form_Response.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withForm_Response sets the old Form_Response of the mutation.
func withForm_Response(node *Form_Response) formResponseOption {
	return func(m *FormResponseMutation) {
		m.oldValue = func(context.Context) (*Form_Response, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormResponseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormResponseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormResponseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormResponseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Form_Response.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FormResponseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FormResponseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Form_Response entity.
// If the Form_Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormResponseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FormResponseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FormResponseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FormResponseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Form_Response entity.
// If the Form_Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormResponseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FormResponseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FormResponseMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FormResponseMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Form_Response entity.
// If the Form_Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormResponseMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FormResponseMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[form_response.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *FormResponseMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[form_response.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FormResponseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, form_response.FieldDeletedAt)
}

// SetUserID sets the "user_id" field.
func (m *FormResponseMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *FormResponseMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Form_Response entity.
// If the Form_Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormResponseMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *FormResponseMutation) ResetUserID() {
	m.user = nil
}

// SetTotalScore sets the "total_score" field.
func (m *FormResponseMutation) SetTotalScore(u uint8) {
	m.total_score = &u
	m.addtotal_score = nil
}

// TotalScore returns the value of the "total_score" field in the mutation.
func (m *FormResponseMutation) TotalScore() (r uint8, exists bool) {
	v := m.total_score
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalScore returns the old "total_score" field's value of the Form_Response entity.
// If the Form_Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormResponseMutation) OldTotalScore(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalScore: %w", err)
	}
	return oldValue.TotalScore, nil
}

// AddTotalScore adds u to the "total_score" field.
func (m *FormResponseMutation) AddTotalScore(u int8) {
	if m.addtotal_score != nil {
		*m.addtotal_score += u
	} else {
		m.addtotal_score = &u
	}
}

// AddedTotalScore returns the value that was added to the "total_score" field in this mutation.
func (m *FormResponseMutation) AddedTotalScore() (r int8, exists bool) {
	v := m.addtotal_score
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalScore resets all changes to the "total_score" field.
func (m *FormResponseMutation) ResetTotalScore() {
	m.total_score = nil
	m.addtotal_score = nil
}

// SetDepressionLevel sets the "depression_level" field.
func (m *FormResponseMutation) SetDepressionLevel(s string) {
	m.depression_level = &s
}

// DepressionLevel returns the value of the "depression_level" field in the mutation.
func (m *FormResponseMutation) DepressionLevel() (r string, exists bool) {
	v := m.depression_level
	if v == nil {
		return
	}
	return *v, true
}

// OldDepressionLevel returns the old "depression_level" field's value of the Form_Response entity.
// If the Form_Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormResponseMutation) OldDepressionLevel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepressionLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepressionLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepressionLevel: %w", err)
	}
	return oldValue.DepressionLevel, nil
}

// ResetDepressionLevel resets all changes to the "depression_level" field.
func (m *FormResponseMutation) ResetDepressionLevel() {
	m.depression_level = nil
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by ids.
func (m *FormResponseMutation) AddHistoryAnswerIDs(ids ...int) {
	if m.history_answers == nil {
		m.history_answers = make(map[int]struct{})
	}
	for i := range ids {
		m.history_answers[ids[i]] = struct{}{}
	}
}

// ClearHistoryAnswers clears the "history_answers" edge to the History_Answer entity.
func (m *FormResponseMutation) ClearHistoryAnswers() {
	m.clearedhistory_answers = true
}

// HistoryAnswersCleared reports if the "history_answers" edge to the History_Answer entity was cleared.
func (m *FormResponseMutation) HistoryAnswersCleared() bool {
	return m.clearedhistory_answers
}

// RemoveHistoryAnswerIDs removes the "history_answers" edge to the History_Answer entity by IDs.
func (m *FormResponseMutation) RemoveHistoryAnswerIDs(ids ...int) {
	if m.removedhistory_answers == nil {
		m.removedhistory_answers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.history_answers, ids[i])
		m.removedhistory_answers[ids[i]] = struct{}{}
	}
}

// RemovedHistoryAnswers returns the removed IDs of the "history_answers" edge to the History_Answer entity.
func (m *FormResponseMutation) RemovedHistoryAnswersIDs() (ids []int) {
	for id := range m.removedhistory_answers {
		ids = append(ids, id)
	}
	return
}

// HistoryAnswersIDs returns the "history_answers" edge IDs in the mutation.
func (m *FormResponseMutation) HistoryAnswersIDs() (ids []int) {
	for id := range m.history_answers {
		ids = append(ids, id)
	}
	return
}

// ResetHistoryAnswers resets all changes to the "history_answers" edge.
func (m *FormResponseMutation) ResetHistoryAnswers() {
	m.history_answers = nil
	m.clearedhistory_answers = false
	m.removedhistory_answers = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *FormResponseMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[form_response.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *FormResponseMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *FormResponseMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *FormResponseMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the FormResponseMutation builder.
func (m *FormResponseMutation) Where(ps ...predicate.Form_Response) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormResponseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormResponseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Form_Response, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormResponseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormResponseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Form_Response).
func (m *FormResponseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormResponseMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, form_response.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, form_response.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, form_response.FieldDeletedAt)
	}
	if m.user != nil {
		fields = append(fields, form_response.FieldUserID)
	}
	if m.total_score != nil {
		fields = append(fields, form_response.FieldTotalScore)
	}
	if m.depression_level != nil {
		fields = append(fields, form_response.FieldDepressionLevel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormResponseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case form_response.FieldCreatedAt:
		return m.CreatedAt()
	case form_response.FieldUpdatedAt:
		return m.UpdatedAt()
	case form_response.FieldDeletedAt:
		return m.DeletedAt()
	case form_response.FieldUserID:
		return m.UserID()
	case form_response.FieldTotalScore:
		return m.TotalScore()
	case form_response.FieldDepressionLevel:
		return m.DepressionLevel()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormResponseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case form_response.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case form_response.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case form_response.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case form_response.FieldUserID:
		return m.OldUserID(ctx)
	case form_response.FieldTotalScore:
		return m.OldTotalScore(ctx)
	case form_response.FieldDepressionLevel:
		return m.OldDepressionLevel(ctx)
	}
	return nil, fmt.Errorf("unknown Form_Response field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormResponseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case form_response.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case form_response.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case form_response.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case form_response.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case form_response.FieldTotalScore:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalScore(v)
		return nil
	case form_response.FieldDepressionLevel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepressionLevel(v)
		return nil
	}
	return fmt.Errorf("unknown Form_Response field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormResponseMutation) AddedFields() []string {
	var fields []string
	if m.addtotal_score != nil {
		fields = append(fields, form_response.FieldTotalScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormResponseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case form_response.FieldTotalScore:
		return m.AddedTotalScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormResponseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case form_response.FieldTotalScore:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalScore(v)
		return nil
	}
	return fmt.Errorf("unknown Form_Response numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormResponseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(form_response.FieldDeletedAt) {
		fields = append(fields, form_response.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormResponseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormResponseMutation) ClearField(name string) error {
	switch name {
	case form_response.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Form_Response nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormResponseMutation) ResetField(name string) error {
	switch name {
	case form_response.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case form_response.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case form_response.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case form_response.FieldUserID:
		m.ResetUserID()
		return nil
	case form_response.FieldTotalScore:
		m.ResetTotalScore()
		return nil
	case form_response.FieldDepressionLevel:
		m.ResetDepressionLevel()
		return nil
	}
	return fmt.Errorf("unknown Form_Response field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormResponseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.history_answers != nil {
		edges = append(edges, form_response.EdgeHistoryAnswers)
	}
	if m.user != nil {
		edges = append(edges, form_response.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormResponseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case form_response.EdgeHistoryAnswers:
		ids := make([]ent.Value, 0, len(m.history_answers))
		for id := range m.history_answers {
			ids = append(ids, id)
		}
		return ids
	case form_response.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormResponseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedhistory_answers != nil {
		edges = append(edges, form_response.EdgeHistoryAnswers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormResponseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case form_response.EdgeHistoryAnswers:
		ids := make([]ent.Value, 0, len(m.removedhistory_answers))
		for id := range m.removedhistory_answers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormResponseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedhistory_answers {
		edges = append(edges, form_response.EdgeHistoryAnswers)
	}
	if m.cleareduser {
		edges = append(edges, form_response.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormResponseMutation) EdgeCleared(name string) bool {
	switch name {
	case form_response.EdgeHistoryAnswers:
		return m.clearedhistory_answers
	case form_response.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormResponseMutation) ClearEdge(name string) error {
	switch name {
	case form_response.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Form_Response unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormResponseMutation) ResetEdge(name string) error {
	switch name {
	case form_response.EdgeHistoryAnswers:
		m.ResetHistoryAnswers()
		return nil
	case form_response.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Form_Response edge %s", name)
}

// HistoryAnswerMutation represents an operation that mutates the History_Answer nodes in the graph.
type HistoryAnswerMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	created_at           *time.Time
	updated_at           *time.Time
	deleted_at           *time.Time
	answer               *int
	addanswer            *int
	clearedFields        map[string]struct{}
	form_response        *int
	clearedform_response bool
	question             *int
	clearedquestion      bool
	done                 bool
	oldValue             func(context.Context) (*History_Answer, error)
	predicates           []predicate.History_Answer
}

var _ ent.Mutation = (*HistoryAnswerMutation)(nil)

// historyAnswerOption allows management of the mutation configuration using functional options.
type historyAnswerOption func(*HistoryAnswerMutation)

// newHistoryAnswerMutation creates new mutation for the History_Answer entity.
func newHistoryAnswerMutation(c config, op Op, opts ...historyAnswerOption) *HistoryAnswerMutation {
	m := &HistoryAnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeHistoryAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHistory_AnswerID sets the ID field of the mutation.
func withHistory_AnswerID(id int) historyAnswerOption {
	return func(m *HistoryAnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *History_Answer
		)
		m.oldValue = func(ctx context.Context) (*History_Answer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().History_Answer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHistory_Answer sets the old History_Answer of the mutation.
func withHistory_Answer(node *History_Answer) historyAnswerOption {
	return func(m *HistoryAnswerMutation) {
		m.oldValue = func(context.Context) (*History_Answer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HistoryAnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HistoryAnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HistoryAnswerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HistoryAnswerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().History_Answer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *HistoryAnswerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HistoryAnswerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the History_Answer entity.
// If the History_Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryAnswerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HistoryAnswerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *HistoryAnswerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *HistoryAnswerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the History_Answer entity.
// If the History_Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryAnswerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *HistoryAnswerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *HistoryAnswerMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *HistoryAnswerMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the History_Answer entity.
// If the History_Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryAnswerMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *HistoryAnswerMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[history_answer.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *HistoryAnswerMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[history_answer.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *HistoryAnswerMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, history_answer.FieldDeletedAt)
}

// SetFormResponseID sets the "form_response_id" field.
func (m *HistoryAnswerMutation) SetFormResponseID(i int) {
	m.form_response = &i
}

// FormResponseID returns the value of the "form_response_id" field in the mutation.
func (m *HistoryAnswerMutation) FormResponseID() (r int, exists bool) {
	v := m.form_response
	if v == nil {
		return
	}
	return *v, true
}

// OldFormResponseID returns the old "form_response_id" field's value of the History_Answer entity.
// If the History_Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryAnswerMutation) OldFormResponseID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormResponseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormResponseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormResponseID: %w", err)
	}
	return oldValue.FormResponseID, nil
}

// ResetFormResponseID resets all changes to the "form_response_id" field.
func (m *HistoryAnswerMutation) ResetFormResponseID() {
	m.form_response = nil
}

// SetQuestionID sets the "question_id" field.
func (m *HistoryAnswerMutation) SetQuestionID(i int) {
	m.question = &i
}

// QuestionID returns the value of the "question_id" field in the mutation.
func (m *HistoryAnswerMutation) QuestionID() (r int, exists bool) {
	v := m.question
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestionID returns the old "question_id" field's value of the History_Answer entity.
// If the History_Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryAnswerMutation) OldQuestionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuestionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuestionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestionID: %w", err)
	}
	return oldValue.QuestionID, nil
}

// ResetQuestionID resets all changes to the "question_id" field.
func (m *HistoryAnswerMutation) ResetQuestionID() {
	m.question = nil
}

// SetAnswer sets the "answer" field.
func (m *HistoryAnswerMutation) SetAnswer(i int) {
	m.answer = &i
	m.addanswer = nil
}

// Answer returns the value of the "answer" field in the mutation.
func (m *HistoryAnswerMutation) Answer() (r int, exists bool) {
	v := m.answer
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswer returns the old "answer" field's value of the History_Answer entity.
// If the History_Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryAnswerMutation) OldAnswer(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswer: %w", err)
	}
	return oldValue.Answer, nil
}

// AddAnswer adds i to the "answer" field.
func (m *HistoryAnswerMutation) AddAnswer(i int) {
	if m.addanswer != nil {
		*m.addanswer += i
	} else {
		m.addanswer = &i
	}
}

// AddedAnswer returns the value that was added to the "answer" field in this mutation.
func (m *HistoryAnswerMutation) AddedAnswer() (r int, exists bool) {
	v := m.addanswer
	if v == nil {
		return
	}
	return *v, true
}

// ResetAnswer resets all changes to the "answer" field.
func (m *HistoryAnswerMutation) ResetAnswer() {
	m.answer = nil
	m.addanswer = nil
}

// ClearFormResponse clears the "form_response" edge to the Form_Response entity.
func (m *HistoryAnswerMutation) ClearFormResponse() {
	m.clearedform_response = true
	m.clearedFields[history_answer.FieldFormResponseID] = struct{}{}
}

// FormResponseCleared reports if the "form_response" edge to the Form_Response entity was cleared.
func (m *HistoryAnswerMutation) FormResponseCleared() bool {
	return m.clearedform_response
}

// FormResponseIDs returns the "form_response" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FormResponseID instead. It exists only for internal usage by the builders.
func (m *HistoryAnswerMutation) FormResponseIDs() (ids []int) {
	if id := m.form_response; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFormResponse resets all changes to the "form_response" edge.
func (m *HistoryAnswerMutation) ResetFormResponse() {
	m.form_response = nil
	m.clearedform_response = false
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *HistoryAnswerMutation) ClearQuestion() {
	m.clearedquestion = true
	m.clearedFields[history_answer.FieldQuestionID] = struct{}{}
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *HistoryAnswerMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// QuestionIDs returns the "question" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionID instead. It exists only for internal usage by the builders.
func (m *HistoryAnswerMutation) QuestionIDs() (ids []int) {
	if id := m.question; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *HistoryAnswerMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
}

// Where appends a list predicates to the HistoryAnswerMutation builder.
func (m *HistoryAnswerMutation) Where(ps ...predicate.History_Answer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HistoryAnswerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HistoryAnswerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.History_Answer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HistoryAnswerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HistoryAnswerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (History_Answer).
func (m *HistoryAnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HistoryAnswerMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, history_answer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, history_answer.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, history_answer.FieldDeletedAt)
	}
	if m.form_response != nil {
		fields = append(fields, history_answer.FieldFormResponseID)
	}
	if m.question != nil {
		fields = append(fields, history_answer.FieldQuestionID)
	}
	if m.answer != nil {
		fields = append(fields, history_answer.FieldAnswer)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HistoryAnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case history_answer.FieldCreatedAt:
		return m.CreatedAt()
	case history_answer.FieldUpdatedAt:
		return m.UpdatedAt()
	case history_answer.FieldDeletedAt:
		return m.DeletedAt()
	case history_answer.FieldFormResponseID:
		return m.FormResponseID()
	case history_answer.FieldQuestionID:
		return m.QuestionID()
	case history_answer.FieldAnswer:
		return m.Answer()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HistoryAnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case history_answer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case history_answer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case history_answer.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case history_answer.FieldFormResponseID:
		return m.OldFormResponseID(ctx)
	case history_answer.FieldQuestionID:
		return m.OldQuestionID(ctx)
	case history_answer.FieldAnswer:
		return m.OldAnswer(ctx)
	}
	return nil, fmt.Errorf("unknown History_Answer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryAnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case history_answer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case history_answer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case history_answer.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case history_answer.FieldFormResponseID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormResponseID(v)
		return nil
	case history_answer.FieldQuestionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestionID(v)
		return nil
	case history_answer.FieldAnswer:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswer(v)
		return nil
	}
	return fmt.Errorf("unknown History_Answer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HistoryAnswerMutation) AddedFields() []string {
	var fields []string
	if m.addanswer != nil {
		fields = append(fields, history_answer.FieldAnswer)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HistoryAnswerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case history_answer.FieldAnswer:
		return m.AddedAnswer()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryAnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case history_answer.FieldAnswer:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAnswer(v)
		return nil
	}
	return fmt.Errorf("unknown History_Answer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HistoryAnswerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(history_answer.FieldDeletedAt) {
		fields = append(fields, history_answer.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HistoryAnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HistoryAnswerMutation) ClearField(name string) error {
	switch name {
	case history_answer.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown History_Answer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HistoryAnswerMutation) ResetField(name string) error {
	switch name {
	case history_answer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case history_answer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case history_answer.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case history_answer.FieldFormResponseID:
		m.ResetFormResponseID()
		return nil
	case history_answer.FieldQuestionID:
		m.ResetQuestionID()
		return nil
	case history_answer.FieldAnswer:
		m.ResetAnswer()
		return nil
	}
	return fmt.Errorf("unknown History_Answer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HistoryAnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.form_response != nil {
		edges = append(edges, history_answer.EdgeFormResponse)
	}
	if m.question != nil {
		edges = append(edges, history_answer.EdgeQuestion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HistoryAnswerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case history_answer.EdgeFormResponse:
		if id := m.form_response; id != nil {
			return []ent.Value{*id}
		}
	case history_answer.EdgeQuestion:
		if id := m.question; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HistoryAnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HistoryAnswerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HistoryAnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedform_response {
		edges = append(edges, history_answer.EdgeFormResponse)
	}
	if m.clearedquestion {
		edges = append(edges, history_answer.EdgeQuestion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HistoryAnswerMutation) EdgeCleared(name string) bool {
	switch name {
	case history_answer.EdgeFormResponse:
		return m.clearedform_response
	case history_answer.EdgeQuestion:
		return m.clearedquestion
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HistoryAnswerMutation) ClearEdge(name string) error {
	switch name {
	case history_answer.EdgeFormResponse:
		m.ClearFormResponse()
		return nil
	case history_answer.EdgeQuestion:
		m.ClearQuestion()
		return nil
	}
	return fmt.Errorf("unknown History_Answer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HistoryAnswerMutation) ResetEdge(name string) error {
	switch name {
	case history_answer.EdgeFormResponse:
		m.ResetFormResponse()
		return nil
	case history_answer.EdgeQuestion:
		m.ResetQuestion()
		return nil
	}
	return fmt.Errorf("unknown History_Answer edge %s", name)
}

// QuestionMutation represents an operation that mutates the Question nodes in the graph.
type QuestionMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	created_at             *time.Time
	updated_at             *time.Time
	deleted_at             *time.Time
	text                   *string
	language               *string
	description            *string
	example                *string
	_order                 *int
	add_order              *int
	clearedFields          map[string]struct{}
	history_answers        map[int]struct{}
	removedhistory_answers map[int]struct{}
	clearedhistory_answers bool
	category               *int
	clearedcategory        bool
	done                   bool
	oldValue               func(context.Context) (*Question, error)
	predicates             []predicate.Question
}

var _ ent.Mutation = (*QuestionMutation)(nil)

// questionOption allows management of the mutation configuration using functional options.
type questionOption func(*QuestionMutation)

// newQuestionMutation creates new mutation for the Question entity.
func newQuestionMutation(c config, op Op, opts ...questionOption) *QuestionMutation {
	m := &QuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionID sets the ID field of the mutation.
func withQuestionID(id int) questionOption {
	return func(m *QuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *Question
		)
		m.oldValue = func(ctx context.Context) (*Question, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion sets the old Question of the mutation.
func withQuestion(node *Question) questionOption {
	return func(m *QuestionMutation) {
		m.oldValue = func(context.Context) (*Question, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Question.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuestionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuestionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuestionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *QuestionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *QuestionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *QuestionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[question.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *QuestionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[question.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *QuestionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, question.FieldDeletedAt)
}

// SetText sets the "text" field.
func (m *QuestionMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *QuestionMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *QuestionMutation) ResetText() {
	m.text = nil
}

// SetLanguage sets the "language" field.
func (m *QuestionMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *QuestionMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *QuestionMutation) ResetLanguage() {
	m.language = nil
}

// SetDescription sets the "description" field.
func (m *QuestionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *QuestionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *QuestionMutation) ResetDescription() {
	m.description = nil
}

// SetExample sets the "example" field.
func (m *QuestionMutation) SetExample(s string) {
	m.example = &s
}

// Example returns the value of the "example" field in the mutation.
func (m *QuestionMutation) Example() (r string, exists bool) {
	v := m.example
	if v == nil {
		return
	}
	return *v, true
}

// OldExample returns the old "example" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldExample(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExample is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExample requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExample: %w", err)
	}
	return oldValue.Example, nil
}

// ResetExample resets all changes to the "example" field.
func (m *QuestionMutation) ResetExample() {
	m.example = nil
}

// SetOrder sets the "order" field.
func (m *QuestionMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *QuestionMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *QuestionMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *QuestionMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *QuestionMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetCategoryID sets the "category_id" field.
func (m *QuestionMutation) SetCategoryID(i int) {
	m.category = &i
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *QuestionMutation) CategoryID() (r int, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldCategoryID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *QuestionMutation) ResetCategoryID() {
	m.category = nil
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by ids.
func (m *QuestionMutation) AddHistoryAnswerIDs(ids ...int) {
	if m.history_answers == nil {
		m.history_answers = make(map[int]struct{})
	}
	for i := range ids {
		m.history_answers[ids[i]] = struct{}{}
	}
}

// ClearHistoryAnswers clears the "history_answers" edge to the History_Answer entity.
func (m *QuestionMutation) ClearHistoryAnswers() {
	m.clearedhistory_answers = true
}

// HistoryAnswersCleared reports if the "history_answers" edge to the History_Answer entity was cleared.
func (m *QuestionMutation) HistoryAnswersCleared() bool {
	return m.clearedhistory_answers
}

// RemoveHistoryAnswerIDs removes the "history_answers" edge to the History_Answer entity by IDs.
func (m *QuestionMutation) RemoveHistoryAnswerIDs(ids ...int) {
	if m.removedhistory_answers == nil {
		m.removedhistory_answers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.history_answers, ids[i])
		m.removedhistory_answers[ids[i]] = struct{}{}
	}
}

// RemovedHistoryAnswers returns the removed IDs of the "history_answers" edge to the History_Answer entity.
func (m *QuestionMutation) RemovedHistoryAnswersIDs() (ids []int) {
	for id := range m.removedhistory_answers {
		ids = append(ids, id)
	}
	return
}

// HistoryAnswersIDs returns the "history_answers" edge IDs in the mutation.
func (m *QuestionMutation) HistoryAnswersIDs() (ids []int) {
	for id := range m.history_answers {
		ids = append(ids, id)
	}
	return
}

// ResetHistoryAnswers resets all changes to the "history_answers" edge.
func (m *QuestionMutation) ResetHistoryAnswers() {
	m.history_answers = nil
	m.clearedhistory_answers = false
	m.removedhistory_answers = nil
}

// ClearCategory clears the "category" edge to the Question_Category entity.
func (m *QuestionMutation) ClearCategory() {
	m.clearedcategory = true
	m.clearedFields[question.FieldCategoryID] = struct{}{}
}

// CategoryCleared reports if the "category" edge to the Question_Category entity was cleared.
func (m *QuestionMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *QuestionMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *QuestionMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the QuestionMutation builder.
func (m *QuestionMutation) Where(ps ...predicate.Question) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Question, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Question).
func (m *QuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, question.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, question.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, question.FieldDeletedAt)
	}
	if m.text != nil {
		fields = append(fields, question.FieldText)
	}
	if m.language != nil {
		fields = append(fields, question.FieldLanguage)
	}
	if m.description != nil {
		fields = append(fields, question.FieldDescription)
	}
	if m.example != nil {
		fields = append(fields, question.FieldExample)
	}
	if m._order != nil {
		fields = append(fields, question.FieldOrder)
	}
	if m.category != nil {
		fields = append(fields, question.FieldCategoryID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case question.FieldCreatedAt:
		return m.CreatedAt()
	case question.FieldUpdatedAt:
		return m.UpdatedAt()
	case question.FieldDeletedAt:
		return m.DeletedAt()
	case question.FieldText:
		return m.Text()
	case question.FieldLanguage:
		return m.Language()
	case question.FieldDescription:
		return m.Description()
	case question.FieldExample:
		return m.Example()
	case question.FieldOrder:
		return m.Order()
	case question.FieldCategoryID:
		return m.CategoryID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case question.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case question.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case question.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case question.FieldText:
		return m.OldText(ctx)
	case question.FieldLanguage:
		return m.OldLanguage(ctx)
	case question.FieldDescription:
		return m.OldDescription(ctx)
	case question.FieldExample:
		return m.OldExample(ctx)
	case question.FieldOrder:
		return m.OldOrder(ctx)
	case question.FieldCategoryID:
		return m.OldCategoryID(ctx)
	}
	return nil, fmt.Errorf("unknown Question field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case question.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case question.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case question.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case question.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case question.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case question.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case question.FieldExample:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExample(v)
		return nil
	case question.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case question.FieldCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, question.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case question.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case question.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Question numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(question.FieldDeletedAt) {
		fields = append(fields, question.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionMutation) ClearField(name string) error {
	switch name {
	case question.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Question nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionMutation) ResetField(name string) error {
	switch name {
	case question.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case question.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case question.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case question.FieldText:
		m.ResetText()
		return nil
	case question.FieldLanguage:
		m.ResetLanguage()
		return nil
	case question.FieldDescription:
		m.ResetDescription()
		return nil
	case question.FieldExample:
		m.ResetExample()
		return nil
	case question.FieldOrder:
		m.ResetOrder()
		return nil
	case question.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.history_answers != nil {
		edges = append(edges, question.EdgeHistoryAnswers)
	}
	if m.category != nil {
		edges = append(edges, question.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeHistoryAnswers:
		ids := make([]ent.Value, 0, len(m.history_answers))
		for id := range m.history_answers {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedhistory_answers != nil {
		edges = append(edges, question.EdgeHistoryAnswers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeHistoryAnswers:
		ids := make([]ent.Value, 0, len(m.removedhistory_answers))
		for id := range m.removedhistory_answers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedhistory_answers {
		edges = append(edges, question.EdgeHistoryAnswers)
	}
	if m.clearedcategory {
		edges = append(edges, question.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case question.EdgeHistoryAnswers:
		return m.clearedhistory_answers
	case question.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionMutation) ClearEdge(name string) error {
	switch name {
	case question.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Question unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionMutation) ResetEdge(name string) error {
	switch name {
	case question.EdgeHistoryAnswers:
		m.ResetHistoryAnswers()
		return nil
	case question.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Question edge %s", name)
}

// QuestionCategoryMutation represents an operation that mutates the Question_Category nodes in the graph.
type QuestionCategoryMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	_order           *int
	add_order        *int
	language         *string
	clearedFields    map[string]struct{}
	questions        map[int]struct{}
	removedquestions map[int]struct{}
	clearedquestions bool
	done             bool
	oldValue         func(context.Context) (*Question_Category, error)
	predicates       []predicate.Question_Category
}

var _ ent.Mutation = (*QuestionCategoryMutation)(nil)

// questionCategoryOption allows management of the mutation configuration using functional options.
type questionCategoryOption func(*QuestionCategoryMutation)

// newQuestionCategoryMutation creates new mutation for the Question_Category entity.
func newQuestionCategoryMutation(c config, op Op, opts ...questionCategoryOption) *QuestionCategoryMutation {
	m := &QuestionCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestion_CategoryID sets the ID field of the mutation.
func withQuestion_CategoryID(id int) questionCategoryOption {
	return func(m *QuestionCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Question_Category
		)
		m.oldValue = func(ctx context.Context) (*Question_Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question_Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion_Category sets the old Question_Category of the mutation.
func withQuestion_Category(node *Question_Category) questionCategoryOption {
	return func(m *QuestionCategoryMutation) {
		m.oldValue = func(context.Context) (*Question_Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionCategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionCategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Question_Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *QuestionCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *QuestionCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Question_Category entity.
// If the Question_Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *QuestionCategoryMutation) ResetName() {
	m.name = nil
}

// SetOrder sets the "order" field.
func (m *QuestionCategoryMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *QuestionCategoryMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Question_Category entity.
// If the Question_Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionCategoryMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *QuestionCategoryMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *QuestionCategoryMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *QuestionCategoryMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetLanguage sets the "language" field.
func (m *QuestionCategoryMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *QuestionCategoryMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Question_Category entity.
// If the Question_Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionCategoryMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *QuestionCategoryMutation) ResetLanguage() {
	m.language = nil
}

// AddQuestionIDs adds the "questions" edge to the Question entity by ids.
func (m *QuestionCategoryMutation) AddQuestionIDs(ids ...int) {
	if m.questions == nil {
		m.questions = make(map[int]struct{})
	}
	for i := range ids {
		m.questions[ids[i]] = struct{}{}
	}
}

// ClearQuestions clears the "questions" edge to the Question entity.
func (m *QuestionCategoryMutation) ClearQuestions() {
	m.clearedquestions = true
}

// QuestionsCleared reports if the "questions" edge to the Question entity was cleared.
func (m *QuestionCategoryMutation) QuestionsCleared() bool {
	return m.clearedquestions
}

// RemoveQuestionIDs removes the "questions" edge to the Question entity by IDs.
func (m *QuestionCategoryMutation) RemoveQuestionIDs(ids ...int) {
	if m.removedquestions == nil {
		m.removedquestions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.questions, ids[i])
		m.removedquestions[ids[i]] = struct{}{}
	}
}

// RemovedQuestions returns the removed IDs of the "questions" edge to the Question entity.
func (m *QuestionCategoryMutation) RemovedQuestionsIDs() (ids []int) {
	for id := range m.removedquestions {
		ids = append(ids, id)
	}
	return
}

// QuestionsIDs returns the "questions" edge IDs in the mutation.
func (m *QuestionCategoryMutation) QuestionsIDs() (ids []int) {
	for id := range m.questions {
		ids = append(ids, id)
	}
	return
}

// ResetQuestions resets all changes to the "questions" edge.
func (m *QuestionCategoryMutation) ResetQuestions() {
	m.questions = nil
	m.clearedquestions = false
	m.removedquestions = nil
}

// Where appends a list predicates to the QuestionCategoryMutation builder.
func (m *QuestionCategoryMutation) Where(ps ...predicate.Question_Category) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Question_Category, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Question_Category).
func (m *QuestionCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionCategoryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, question_category.FieldName)
	}
	if m._order != nil {
		fields = append(fields, question_category.FieldOrder)
	}
	if m.language != nil {
		fields = append(fields, question_category.FieldLanguage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case question_category.FieldName:
		return m.Name()
	case question_category.FieldOrder:
		return m.Order()
	case question_category.FieldLanguage:
		return m.Language()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case question_category.FieldName:
		return m.OldName(ctx)
	case question_category.FieldOrder:
		return m.OldOrder(ctx)
	case question_category.FieldLanguage:
		return m.OldLanguage(ctx)
	}
	return nil, fmt.Errorf("unknown Question_Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case question_category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case question_category.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case question_category.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	}
	return fmt.Errorf("unknown Question_Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionCategoryMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, question_category.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionCategoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case question_category.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case question_category.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Question_Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Question_Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionCategoryMutation) ResetField(name string) error {
	switch name {
	case question_category.FieldName:
		m.ResetName()
		return nil
	case question_category.FieldOrder:
		m.ResetOrder()
		return nil
	case question_category.FieldLanguage:
		m.ResetLanguage()
		return nil
	}
	return fmt.Errorf("unknown Question_Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.questions != nil {
		edges = append(edges, question_category.EdgeQuestions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question_category.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.questions))
		for id := range m.questions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedquestions != nil {
		edges = append(edges, question_category.EdgeQuestions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case question_category.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.removedquestions))
		for id := range m.removedquestions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedquestions {
		edges = append(edges, question_category.EdgeQuestions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case question_category.EdgeQuestions:
		return m.clearedquestions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionCategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Question_Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionCategoryMutation) ResetEdge(name string) error {
	switch name {
	case question_category.EdgeQuestions:
		m.ResetQuestions()
		return nil
	}
	return fmt.Errorf("unknown Question_Category edge %s", name)
}

// TokenMutation represents an operation that mutates the Token nodes in the graph.
type TokenMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	access_token             *string
	refresh_token            *string
	access_token_expires_at  *time.Time
	refresh_token_expires_at *time.Time
	revoked                  *bool
	clearedFields            map[string]struct{}
	user                     *uuid.UUID
	cleareduser              bool
	done                     bool
	oldValue                 func(context.Context) (*Token, error)
	predicates               []predicate.Token
}

var _ ent.Mutation = (*TokenMutation)(nil)

// tokenOption allows management of the mutation configuration using functional options.
type tokenOption func(*TokenMutation)

// newTokenMutation creates new mutation for the Token entity.
func newTokenMutation(c config, op Op, opts ...tokenOption) *TokenMutation {
	m := &TokenMutation{
		config:        c,
		op:            op,
		typ:           TypeToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokenID sets the ID field of the mutation.
func withTokenID(id uuid.UUID) tokenOption {
	return func(m *TokenMutation) {
		var (
			err   error
			once  sync.Once
			value *Token
		)
		m.oldValue = func(ctx context.Context) (*Token, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Token.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withToken sets the old Token of the mutation.
func withToken(node *Token) tokenOption {
	return func(m *TokenMutation) {
		m.oldValue = func(context.Context) (*Token, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Token entities.
func (m *TokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Token.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *TokenMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TokenMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TokenMutation) ResetUserID() {
	m.user = nil
}

// SetAccessToken sets the "access_token" field.
func (m *TokenMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *TokenMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *TokenMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *TokenMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *TokenMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldRefreshToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *TokenMutation) ResetRefreshToken() {
	m.refresh_token = nil
}

// SetAccessTokenExpiresAt sets the "access_token_expires_at" field.
func (m *TokenMutation) SetAccessTokenExpiresAt(t time.Time) {
	m.access_token_expires_at = &t
}

// AccessTokenExpiresAt returns the value of the "access_token_expires_at" field in the mutation.
func (m *TokenMutation) AccessTokenExpiresAt() (r time.Time, exists bool) {
	v := m.access_token_expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessTokenExpiresAt returns the old "access_token_expires_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldAccessTokenExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessTokenExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessTokenExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessTokenExpiresAt: %w", err)
	}
	return oldValue.AccessTokenExpiresAt, nil
}

// ResetAccessTokenExpiresAt resets all changes to the "access_token_expires_at" field.
func (m *TokenMutation) ResetAccessTokenExpiresAt() {
	m.access_token_expires_at = nil
}

// SetRefreshTokenExpiresAt sets the "refresh_token_expires_at" field.
func (m *TokenMutation) SetRefreshTokenExpiresAt(t time.Time) {
	m.refresh_token_expires_at = &t
}

// RefreshTokenExpiresAt returns the value of the "refresh_token_expires_at" field in the mutation.
func (m *TokenMutation) RefreshTokenExpiresAt() (r time.Time, exists bool) {
	v := m.refresh_token_expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshTokenExpiresAt returns the old "refresh_token_expires_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldRefreshTokenExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshTokenExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshTokenExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshTokenExpiresAt: %w", err)
	}
	return oldValue.RefreshTokenExpiresAt, nil
}

// ResetRefreshTokenExpiresAt resets all changes to the "refresh_token_expires_at" field.
func (m *TokenMutation) ResetRefreshTokenExpiresAt() {
	m.refresh_token_expires_at = nil
}

// SetRevoked sets the "revoked" field.
func (m *TokenMutation) SetRevoked(b bool) {
	m.revoked = &b
}

// Revoked returns the value of the "revoked" field in the mutation.
func (m *TokenMutation) Revoked() (r bool, exists bool) {
	v := m.revoked
	if v == nil {
		return
	}
	return *v, true
}

// OldRevoked returns the old "revoked" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldRevoked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevoked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevoked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevoked: %w", err)
	}
	return oldValue.Revoked, nil
}

// ResetRevoked resets all changes to the "revoked" field.
func (m *TokenMutation) ResetRevoked() {
	m.revoked = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *TokenMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[token.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TokenMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TokenMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TokenMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the TokenMutation builder.
func (m *TokenMutation) Where(ps ...predicate.Token) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Token, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Token).
func (m *TokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokenMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user != nil {
		fields = append(fields, token.FieldUserID)
	}
	if m.access_token != nil {
		fields = append(fields, token.FieldAccessToken)
	}
	if m.refresh_token != nil {
		fields = append(fields, token.FieldRefreshToken)
	}
	if m.access_token_expires_at != nil {
		fields = append(fields, token.FieldAccessTokenExpiresAt)
	}
	if m.refresh_token_expires_at != nil {
		fields = append(fields, token.FieldRefreshTokenExpiresAt)
	}
	if m.revoked != nil {
		fields = append(fields, token.FieldRevoked)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case token.FieldUserID:
		return m.UserID()
	case token.FieldAccessToken:
		return m.AccessToken()
	case token.FieldRefreshToken:
		return m.RefreshToken()
	case token.FieldAccessTokenExpiresAt:
		return m.AccessTokenExpiresAt()
	case token.FieldRefreshTokenExpiresAt:
		return m.RefreshTokenExpiresAt()
	case token.FieldRevoked:
		return m.Revoked()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case token.FieldUserID:
		return m.OldUserID(ctx)
	case token.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case token.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	case token.FieldAccessTokenExpiresAt:
		return m.OldAccessTokenExpiresAt(ctx)
	case token.FieldRefreshTokenExpiresAt:
		return m.OldRefreshTokenExpiresAt(ctx)
	case token.FieldRevoked:
		return m.OldRevoked(ctx)
	}
	return nil, fmt.Errorf("unknown Token field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case token.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case token.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case token.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	case token.FieldAccessTokenExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessTokenExpiresAt(v)
		return nil
	case token.FieldRefreshTokenExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshTokenExpiresAt(v)
		return nil
	case token.FieldRevoked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevoked(v)
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Token numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Token nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokenMutation) ResetField(name string) error {
	switch name {
	case token.FieldUserID:
		m.ResetUserID()
		return nil
	case token.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case token.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	case token.FieldAccessTokenExpiresAt:
		m.ResetAccessTokenExpiresAt()
		return nil
	case token.FieldRefreshTokenExpiresAt:
		m.ResetRefreshTokenExpiresAt()
		return nil
	case token.FieldRevoked:
		m.ResetRevoked()
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, token.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case token.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, token.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokenMutation) EdgeCleared(name string) bool {
	switch name {
	case token.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokenMutation) ClearEdge(name string) error {
	switch name {
	case token.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Token unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokenMutation) ResetEdge(name string) error {
	switch name {
	case token.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Token edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	name                     *string
	username                 *string
	email                    *string
	password                 *string
	active                   *bool
	clearedFields            map[string]struct{}
	form_responses           map[int]struct{}
	removedform_responses    map[int]struct{}
	clearedform_responses    bool
	activation_tokens        *uuid.UUID
	clearedactivation_tokens bool
	tokens                   map[uuid.UUID]struct{}
	removedtokens            map[uuid.UUID]struct{}
	clearedtokens            bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetActive sets the "active" field.
func (m *UserMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *UserMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *UserMutation) ResetActive() {
	m.active = nil
}

// AddFormResponseIDs adds the "form_responses" edge to the Form_Response entity by ids.
func (m *UserMutation) AddFormResponseIDs(ids ...int) {
	if m.form_responses == nil {
		m.form_responses = make(map[int]struct{})
	}
	for i := range ids {
		m.form_responses[ids[i]] = struct{}{}
	}
}

// ClearFormResponses clears the "form_responses" edge to the Form_Response entity.
func (m *UserMutation) ClearFormResponses() {
	m.clearedform_responses = true
}

// FormResponsesCleared reports if the "form_responses" edge to the Form_Response entity was cleared.
func (m *UserMutation) FormResponsesCleared() bool {
	return m.clearedform_responses
}

// RemoveFormResponseIDs removes the "form_responses" edge to the Form_Response entity by IDs.
func (m *UserMutation) RemoveFormResponseIDs(ids ...int) {
	if m.removedform_responses == nil {
		m.removedform_responses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.form_responses, ids[i])
		m.removedform_responses[ids[i]] = struct{}{}
	}
}

// RemovedFormResponses returns the removed IDs of the "form_responses" edge to the Form_Response entity.
func (m *UserMutation) RemovedFormResponsesIDs() (ids []int) {
	for id := range m.removedform_responses {
		ids = append(ids, id)
	}
	return
}

// FormResponsesIDs returns the "form_responses" edge IDs in the mutation.
func (m *UserMutation) FormResponsesIDs() (ids []int) {
	for id := range m.form_responses {
		ids = append(ids, id)
	}
	return
}

// ResetFormResponses resets all changes to the "form_responses" edge.
func (m *UserMutation) ResetFormResponses() {
	m.form_responses = nil
	m.clearedform_responses = false
	m.removedform_responses = nil
}

// SetActivationTokensID sets the "activation_tokens" edge to the Activation_token entity by id.
func (m *UserMutation) SetActivationTokensID(id uuid.UUID) {
	m.activation_tokens = &id
}

// ClearActivationTokens clears the "activation_tokens" edge to the Activation_token entity.
func (m *UserMutation) ClearActivationTokens() {
	m.clearedactivation_tokens = true
}

// ActivationTokensCleared reports if the "activation_tokens" edge to the Activation_token entity was cleared.
func (m *UserMutation) ActivationTokensCleared() bool {
	return m.clearedactivation_tokens
}

// ActivationTokensID returns the "activation_tokens" edge ID in the mutation.
func (m *UserMutation) ActivationTokensID() (id uuid.UUID, exists bool) {
	if m.activation_tokens != nil {
		return *m.activation_tokens, true
	}
	return
}

// ActivationTokensIDs returns the "activation_tokens" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActivationTokensID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ActivationTokensIDs() (ids []uuid.UUID) {
	if id := m.activation_tokens; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetActivationTokens resets all changes to the "activation_tokens" edge.
func (m *UserMutation) ResetActivationTokens() {
	m.activation_tokens = nil
	m.clearedactivation_tokens = false
}

// AddTokenIDs adds the "tokens" edge to the Token entity by ids.
func (m *UserMutation) AddTokenIDs(ids ...uuid.UUID) {
	if m.tokens == nil {
		m.tokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tokens[ids[i]] = struct{}{}
	}
}

// ClearTokens clears the "tokens" edge to the Token entity.
func (m *UserMutation) ClearTokens() {
	m.clearedtokens = true
}

// TokensCleared reports if the "tokens" edge to the Token entity was cleared.
func (m *UserMutation) TokensCleared() bool {
	return m.clearedtokens
}

// RemoveTokenIDs removes the "tokens" edge to the Token entity by IDs.
func (m *UserMutation) RemoveTokenIDs(ids ...uuid.UUID) {
	if m.removedtokens == nil {
		m.removedtokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tokens, ids[i])
		m.removedtokens[ids[i]] = struct{}{}
	}
}

// RemovedTokens returns the removed IDs of the "tokens" edge to the Token entity.
func (m *UserMutation) RemovedTokensIDs() (ids []uuid.UUID) {
	for id := range m.removedtokens {
		ids = append(ids, id)
	}
	return
}

// TokensIDs returns the "tokens" edge IDs in the mutation.
func (m *UserMutation) TokensIDs() (ids []uuid.UUID) {
	for id := range m.tokens {
		ids = append(ids, id)
	}
	return
}

// ResetTokens resets all changes to the "tokens" edge.
func (m *UserMutation) ResetTokens() {
	m.tokens = nil
	m.clearedtokens = false
	m.removedtokens = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.active != nil {
		fields = append(fields, user.FieldActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldActive:
		return m.Active()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldActive:
		return m.OldActive(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldActive:
		m.ResetActive()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.form_responses != nil {
		edges = append(edges, user.EdgeFormResponses)
	}
	if m.activation_tokens != nil {
		edges = append(edges, user.EdgeActivationTokens)
	}
	if m.tokens != nil {
		edges = append(edges, user.EdgeTokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFormResponses:
		ids := make([]ent.Value, 0, len(m.form_responses))
		for id := range m.form_responses {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeActivationTokens:
		if id := m.activation_tokens; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.tokens))
		for id := range m.tokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedform_responses != nil {
		edges = append(edges, user.EdgeFormResponses)
	}
	if m.removedtokens != nil {
		edges = append(edges, user.EdgeTokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFormResponses:
		ids := make([]ent.Value, 0, len(m.removedform_responses))
		for id := range m.removedform_responses {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTokens:
		ids := make([]ent.Value, 0, len(m.removedtokens))
		for id := range m.removedtokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedform_responses {
		edges = append(edges, user.EdgeFormResponses)
	}
	if m.clearedactivation_tokens {
		edges = append(edges, user.EdgeActivationTokens)
	}
	if m.clearedtokens {
		edges = append(edges, user.EdgeTokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFormResponses:
		return m.clearedform_responses
	case user.EdgeActivationTokens:
		return m.clearedactivation_tokens
	case user.EdgeTokens:
		return m.clearedtokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeActivationTokens:
		m.ClearActivationTokens()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFormResponses:
		m.ResetFormResponses()
		return nil
	case user.EdgeActivationTokens:
		m.ResetActivationTokens()
		return nil
	case user.EdgeTokens:
		m.ResetTokens()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
