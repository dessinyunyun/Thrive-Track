// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-gin/database/ent/activation_token"
	"go-gin/database/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Activation_token is the model entity for the Activation_token schema.
type Activation_token struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Isused holds the value of the "isused" field.
	Isused bool `json:"isused,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Activation_tokenQuery when eager-loading is set.
	Edges        Activation_tokenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Activation_tokenEdges holds the relations/edges for other nodes in the graph.
type Activation_tokenEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Activation_tokenEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activation_token) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activation_token.FieldIsused:
			values[i] = new(sql.NullBool)
		case activation_token.FieldToken:
			values[i] = new(sql.NullString)
		case activation_token.FieldCreatedAt, activation_token.FieldUpdatedAt, activation_token.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case activation_token.FieldID, activation_token.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activation_token fields.
func (at *Activation_token) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activation_token.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case activation_token.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case activation_token.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		case activation_token.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				at.DeletedAt = new(time.Time)
				*at.DeletedAt = value.Time
			}
		case activation_token.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				at.UserID = *value
			}
		case activation_token.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				at.Token = value.String
			}
		case activation_token.FieldIsused:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isused", values[i])
			} else if value.Valid {
				at.Isused = value.Bool
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Activation_token.
// This includes values selected through modifiers, order, etc.
func (at *Activation_token) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Activation_token entity.
func (at *Activation_token) QueryUser() *UserQuery {
	return NewActivationTokenClient(at.config).QueryUser(at)
}

// Update returns a builder for updating this Activation_token.
// Note that you need to call Activation_token.Unwrap() before calling this method if this Activation_token
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *Activation_token) Update() *ActivationTokenUpdateOne {
	return NewActivationTokenClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the Activation_token entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *Activation_token) Unwrap() *Activation_token {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activation_token is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *Activation_token) String() string {
	var builder strings.Builder
	builder.WriteString("Activation_token(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := at.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", at.UserID))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(at.Token)
	builder.WriteString(", ")
	builder.WriteString("isused=")
	builder.WriteString(fmt.Sprintf("%v", at.Isused))
	builder.WriteByte(')')
	return builder.String()
}

// Activation_tokens is a parsable slice of Activation_token.
type Activation_tokens []*Activation_token
