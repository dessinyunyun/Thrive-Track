// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/question"
	"go-gin/database/ent/question_category"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionCategoryCreate is the builder for creating a Question_Category entity.
type QuestionCategoryCreate struct {
	config
	mutation *QuestionCategoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (qcc *QuestionCategoryCreate) SetName(s string) *QuestionCategoryCreate {
	qcc.mutation.SetName(s)
	return qcc
}

// SetOrder sets the "order" field.
func (qcc *QuestionCategoryCreate) SetOrder(i int) *QuestionCategoryCreate {
	qcc.mutation.SetOrder(i)
	return qcc
}

// SetLanguage sets the "language" field.
func (qcc *QuestionCategoryCreate) SetLanguage(s string) *QuestionCategoryCreate {
	qcc.mutation.SetLanguage(s)
	return qcc
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qcc *QuestionCategoryCreate) AddQuestionIDs(ids ...int) *QuestionCategoryCreate {
	qcc.mutation.AddQuestionIDs(ids...)
	return qcc
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qcc *QuestionCategoryCreate) AddQuestions(q ...*Question) *QuestionCategoryCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcc.AddQuestionIDs(ids...)
}

// Mutation returns the QuestionCategoryMutation object of the builder.
func (qcc *QuestionCategoryCreate) Mutation() *QuestionCategoryMutation {
	return qcc.mutation
}

// Save creates the Question_Category in the database.
func (qcc *QuestionCategoryCreate) Save(ctx context.Context) (*Question_Category, error) {
	return withHooks(ctx, qcc.sqlSave, qcc.mutation, qcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qcc *QuestionCategoryCreate) SaveX(ctx context.Context) *Question_Category {
	v, err := qcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcc *QuestionCategoryCreate) Exec(ctx context.Context) error {
	_, err := qcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcc *QuestionCategoryCreate) ExecX(ctx context.Context) {
	if err := qcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcc *QuestionCategoryCreate) check() error {
	if _, ok := qcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Question_Category.name"`)}
	}
	if v, ok := qcc.mutation.Name(); ok {
		if err := question_category.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Question_Category.name": %w`, err)}
		}
	}
	if _, ok := qcc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Question_Category.order"`)}
	}
	if _, ok := qcc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Question_Category.language"`)}
	}
	if v, ok := qcc.mutation.Language(); ok {
		if err := question_category.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Question_Category.language": %w`, err)}
		}
	}
	return nil
}

func (qcc *QuestionCategoryCreate) sqlSave(ctx context.Context) (*Question_Category, error) {
	if err := qcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qcc.mutation.id = &_node.ID
	qcc.mutation.done = true
	return _node, nil
}

func (qcc *QuestionCategoryCreate) createSpec() (*Question_Category, *sqlgraph.CreateSpec) {
	var (
		_node = &Question_Category{config: qcc.config}
		_spec = sqlgraph.NewCreateSpec(question_category.Table, sqlgraph.NewFieldSpec(question_category.FieldID, field.TypeInt))
	)
	if value, ok := qcc.mutation.Name(); ok {
		_spec.SetField(question_category.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := qcc.mutation.Order(); ok {
		_spec.SetField(question_category.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := qcc.mutation.Language(); ok {
		_spec.SetField(question_category.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if nodes := qcc.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question_category.QuestionsTable,
			Columns: []string{question_category.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionCategoryCreateBulk is the builder for creating many Question_Category entities in bulk.
type QuestionCategoryCreateBulk struct {
	config
	err      error
	builders []*QuestionCategoryCreate
}

// Save creates the Question_Category entities in the database.
func (qccb *QuestionCategoryCreateBulk) Save(ctx context.Context) ([]*Question_Category, error) {
	if qccb.err != nil {
		return nil, qccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qccb.builders))
	nodes := make([]*Question_Category, len(qccb.builders))
	mutators := make([]Mutator, len(qccb.builders))
	for i := range qccb.builders {
		func(i int, root context.Context) {
			builder := qccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qccb *QuestionCategoryCreateBulk) SaveX(ctx context.Context) []*Question_Category {
	v, err := qccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qccb *QuestionCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := qccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qccb *QuestionCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := qccb.Exec(ctx); err != nil {
		panic(err)
	}
}
