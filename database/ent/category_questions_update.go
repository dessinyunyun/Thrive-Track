// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/category_questions"
	"go-gin/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryQuestionsUpdate is the builder for updating Category_Questions entities.
type CategoryQuestionsUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryQuestionsMutation
}

// Where appends a list predicates to the CategoryQuestionsUpdate builder.
func (cqu *CategoryQuestionsUpdate) Where(ps ...predicate.Category_Questions) *CategoryQuestionsUpdate {
	cqu.mutation.Where(ps...)
	return cqu
}

// Mutation returns the CategoryQuestionsMutation object of the builder.
func (cqu *CategoryQuestionsUpdate) Mutation() *CategoryQuestionsMutation {
	return cqu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cqu *CategoryQuestionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cqu.sqlSave, cqu.mutation, cqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cqu *CategoryQuestionsUpdate) SaveX(ctx context.Context) int {
	affected, err := cqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cqu *CategoryQuestionsUpdate) Exec(ctx context.Context) error {
	_, err := cqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqu *CategoryQuestionsUpdate) ExecX(ctx context.Context) {
	if err := cqu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cqu *CategoryQuestionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(category_questions.Table, category_questions.Columns, sqlgraph.NewFieldSpec(category_questions.FieldID, field.TypeInt))
	if ps := cqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category_questions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cqu.mutation.done = true
	return n, nil
}

// CategoryQuestionsUpdateOne is the builder for updating a single Category_Questions entity.
type CategoryQuestionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryQuestionsMutation
}

// Mutation returns the CategoryQuestionsMutation object of the builder.
func (cquo *CategoryQuestionsUpdateOne) Mutation() *CategoryQuestionsMutation {
	return cquo.mutation
}

// Where appends a list predicates to the CategoryQuestionsUpdate builder.
func (cquo *CategoryQuestionsUpdateOne) Where(ps ...predicate.Category_Questions) *CategoryQuestionsUpdateOne {
	cquo.mutation.Where(ps...)
	return cquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cquo *CategoryQuestionsUpdateOne) Select(field string, fields ...string) *CategoryQuestionsUpdateOne {
	cquo.fields = append([]string{field}, fields...)
	return cquo
}

// Save executes the query and returns the updated Category_Questions entity.
func (cquo *CategoryQuestionsUpdateOne) Save(ctx context.Context) (*Category_Questions, error) {
	return withHooks(ctx, cquo.sqlSave, cquo.mutation, cquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cquo *CategoryQuestionsUpdateOne) SaveX(ctx context.Context) *Category_Questions {
	node, err := cquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cquo *CategoryQuestionsUpdateOne) Exec(ctx context.Context) error {
	_, err := cquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cquo *CategoryQuestionsUpdateOne) ExecX(ctx context.Context) {
	if err := cquo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cquo *CategoryQuestionsUpdateOne) sqlSave(ctx context.Context) (_node *Category_Questions, err error) {
	_spec := sqlgraph.NewUpdateSpec(category_questions.Table, category_questions.Columns, sqlgraph.NewFieldSpec(category_questions.FieldID, field.TypeInt))
	id, ok := cquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Category_Questions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category_questions.FieldID)
		for _, f := range fields {
			if !category_questions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != category_questions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &Category_Questions{config: cquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category_questions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cquo.mutation.done = true
	return _node, nil
}
