// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/activation_token"
	"go-gin/database/ent/predicate"
	"go-gin/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ActivationTokenUpdate is the builder for updating Activation_token entities.
type ActivationTokenUpdate struct {
	config
	hooks    []Hook
	mutation *ActivationTokenMutation
}

// Where appends a list predicates to the ActivationTokenUpdate builder.
func (atu *ActivationTokenUpdate) Where(ps ...predicate.Activation_token) *ActivationTokenUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *ActivationTokenUpdate) SetUpdatedAt(t time.Time) *ActivationTokenUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetDeletedAt sets the "deleted_at" field.
func (atu *ActivationTokenUpdate) SetDeletedAt(t time.Time) *ActivationTokenUpdate {
	atu.mutation.SetDeletedAt(t)
	return atu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atu *ActivationTokenUpdate) SetNillableDeletedAt(t *time.Time) *ActivationTokenUpdate {
	if t != nil {
		atu.SetDeletedAt(*t)
	}
	return atu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atu *ActivationTokenUpdate) ClearDeletedAt() *ActivationTokenUpdate {
	atu.mutation.ClearDeletedAt()
	return atu
}

// SetUserID sets the "user_id" field.
func (atu *ActivationTokenUpdate) SetUserID(u uuid.UUID) *ActivationTokenUpdate {
	atu.mutation.SetUserID(u)
	return atu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (atu *ActivationTokenUpdate) SetNillableUserID(u *uuid.UUID) *ActivationTokenUpdate {
	if u != nil {
		atu.SetUserID(*u)
	}
	return atu
}

// SetToken sets the "token" field.
func (atu *ActivationTokenUpdate) SetToken(s string) *ActivationTokenUpdate {
	atu.mutation.SetToken(s)
	return atu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (atu *ActivationTokenUpdate) SetNillableToken(s *string) *ActivationTokenUpdate {
	if s != nil {
		atu.SetToken(*s)
	}
	return atu
}

// SetIsused sets the "isused" field.
func (atu *ActivationTokenUpdate) SetIsused(b bool) *ActivationTokenUpdate {
	atu.mutation.SetIsused(b)
	return atu
}

// SetNillableIsused sets the "isused" field if the given value is not nil.
func (atu *ActivationTokenUpdate) SetNillableIsused(b *bool) *ActivationTokenUpdate {
	if b != nil {
		atu.SetIsused(*b)
	}
	return atu
}

// SetUser sets the "user" edge to the User entity.
func (atu *ActivationTokenUpdate) SetUser(u *User) *ActivationTokenUpdate {
	return atu.SetUserID(u.ID)
}

// Mutation returns the ActivationTokenMutation object of the builder.
func (atu *ActivationTokenUpdate) Mutation() *ActivationTokenMutation {
	return atu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (atu *ActivationTokenUpdate) ClearUser() *ActivationTokenUpdate {
	atu.mutation.ClearUser()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *ActivationTokenUpdate) Save(ctx context.Context) (int, error) {
	atu.defaults()
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *ActivationTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *ActivationTokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *ActivationTokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *ActivationTokenUpdate) defaults() {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		v := activation_token.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *ActivationTokenUpdate) check() error {
	if v, ok := atu.mutation.Token(); ok {
		if err := activation_token.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Activation_token.token": %w`, err)}
		}
	}
	if atu.mutation.UserCleared() && len(atu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Activation_token.user"`)
	}
	return nil
}

func (atu *ActivationTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activation_token.Table, activation_token.Columns, sqlgraph.NewFieldSpec(activation_token.FieldID, field.TypeUUID))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(activation_token.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.DeletedAt(); ok {
		_spec.SetField(activation_token.FieldDeletedAt, field.TypeTime, value)
	}
	if atu.mutation.DeletedAtCleared() {
		_spec.ClearField(activation_token.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := atu.mutation.Token(); ok {
		_spec.SetField(activation_token.FieldToken, field.TypeString, value)
	}
	if value, ok := atu.mutation.Isused(); ok {
		_spec.SetField(activation_token.FieldIsused, field.TypeBool, value)
	}
	if atu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activation_token.UserTable,
			Columns: []string{activation_token.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activation_token.UserTable,
			Columns: []string{activation_token.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activation_token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// ActivationTokenUpdateOne is the builder for updating a single Activation_token entity.
type ActivationTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivationTokenMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *ActivationTokenUpdateOne) SetUpdatedAt(t time.Time) *ActivationTokenUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetDeletedAt sets the "deleted_at" field.
func (atuo *ActivationTokenUpdateOne) SetDeletedAt(t time.Time) *ActivationTokenUpdateOne {
	atuo.mutation.SetDeletedAt(t)
	return atuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atuo *ActivationTokenUpdateOne) SetNillableDeletedAt(t *time.Time) *ActivationTokenUpdateOne {
	if t != nil {
		atuo.SetDeletedAt(*t)
	}
	return atuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atuo *ActivationTokenUpdateOne) ClearDeletedAt() *ActivationTokenUpdateOne {
	atuo.mutation.ClearDeletedAt()
	return atuo
}

// SetUserID sets the "user_id" field.
func (atuo *ActivationTokenUpdateOne) SetUserID(u uuid.UUID) *ActivationTokenUpdateOne {
	atuo.mutation.SetUserID(u)
	return atuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (atuo *ActivationTokenUpdateOne) SetNillableUserID(u *uuid.UUID) *ActivationTokenUpdateOne {
	if u != nil {
		atuo.SetUserID(*u)
	}
	return atuo
}

// SetToken sets the "token" field.
func (atuo *ActivationTokenUpdateOne) SetToken(s string) *ActivationTokenUpdateOne {
	atuo.mutation.SetToken(s)
	return atuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (atuo *ActivationTokenUpdateOne) SetNillableToken(s *string) *ActivationTokenUpdateOne {
	if s != nil {
		atuo.SetToken(*s)
	}
	return atuo
}

// SetIsused sets the "isused" field.
func (atuo *ActivationTokenUpdateOne) SetIsused(b bool) *ActivationTokenUpdateOne {
	atuo.mutation.SetIsused(b)
	return atuo
}

// SetNillableIsused sets the "isused" field if the given value is not nil.
func (atuo *ActivationTokenUpdateOne) SetNillableIsused(b *bool) *ActivationTokenUpdateOne {
	if b != nil {
		atuo.SetIsused(*b)
	}
	return atuo
}

// SetUser sets the "user" edge to the User entity.
func (atuo *ActivationTokenUpdateOne) SetUser(u *User) *ActivationTokenUpdateOne {
	return atuo.SetUserID(u.ID)
}

// Mutation returns the ActivationTokenMutation object of the builder.
func (atuo *ActivationTokenUpdateOne) Mutation() *ActivationTokenMutation {
	return atuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (atuo *ActivationTokenUpdateOne) ClearUser() *ActivationTokenUpdateOne {
	atuo.mutation.ClearUser()
	return atuo
}

// Where appends a list predicates to the ActivationTokenUpdate builder.
func (atuo *ActivationTokenUpdateOne) Where(ps ...predicate.Activation_token) *ActivationTokenUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *ActivationTokenUpdateOne) Select(field string, fields ...string) *ActivationTokenUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated Activation_token entity.
func (atuo *ActivationTokenUpdateOne) Save(ctx context.Context) (*Activation_token, error) {
	atuo.defaults()
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *ActivationTokenUpdateOne) SaveX(ctx context.Context) *Activation_token {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *ActivationTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *ActivationTokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *ActivationTokenUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		v := activation_token.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *ActivationTokenUpdateOne) check() error {
	if v, ok := atuo.mutation.Token(); ok {
		if err := activation_token.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Activation_token.token": %w`, err)}
		}
	}
	if atuo.mutation.UserCleared() && len(atuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Activation_token.user"`)
	}
	return nil
}

func (atuo *ActivationTokenUpdateOne) sqlSave(ctx context.Context) (_node *Activation_token, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activation_token.Table, activation_token.Columns, sqlgraph.NewFieldSpec(activation_token.FieldID, field.TypeUUID))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Activation_token.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activation_token.FieldID)
		for _, f := range fields {
			if !activation_token.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activation_token.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(activation_token.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.DeletedAt(); ok {
		_spec.SetField(activation_token.FieldDeletedAt, field.TypeTime, value)
	}
	if atuo.mutation.DeletedAtCleared() {
		_spec.ClearField(activation_token.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.Token(); ok {
		_spec.SetField(activation_token.FieldToken, field.TypeString, value)
	}
	if value, ok := atuo.mutation.Isused(); ok {
		_spec.SetField(activation_token.FieldIsused, field.TypeBool, value)
	}
	if atuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activation_token.UserTable,
			Columns: []string{activation_token.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   activation_token.UserTable,
			Columns: []string{activation_token.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Activation_token{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activation_token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
