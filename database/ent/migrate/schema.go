// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActivationTokensColumns holds the columns for the "activation_tokens" table.
	ActivationTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "token", Type: field.TypeString, Unique: true, Size: 520},
		{Name: "isused", Type: field.TypeBool, Default: false},
		{Name: "user_id", Type: field.TypeUUID, Unique: true},
	}
	// ActivationTokensTable holds the schema information for the "activation_tokens" table.
	ActivationTokensTable = &schema.Table{
		Name:       "activation_tokens",
		Columns:    ActivationTokensColumns,
		PrimaryKey: []*schema.Column{ActivationTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "activation_tokens_users_activation_tokens",
				Columns:    []*schema.Column{ActivationTokensColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ExamplesColumns holds the columns for the "examples" table.
	ExamplesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 100},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true, Size: 150},
	}
	// ExamplesTable holds the schema information for the "examples" table.
	ExamplesTable = &schema.Table{
		Name:       "examples",
		Columns:    ExamplesColumns,
		PrimaryKey: []*schema.Column{ExamplesColumns[0]},
	}
	// FormResponsesColumns holds the columns for the "form_responses" table.
	FormResponsesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "total_score", Type: field.TypeUint8, Default: 0},
		{Name: "depression_level", Type: field.TypeString, Size: 100},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// FormResponsesTable holds the schema information for the "form_responses" table.
	FormResponsesTable = &schema.Table{
		Name:       "form_responses",
		Columns:    FormResponsesColumns,
		PrimaryKey: []*schema.Column{FormResponsesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "form_responses_users_form_responses",
				Columns:    []*schema.Column{FormResponsesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// HistoryAnswersColumns holds the columns for the "history_answers" table.
	HistoryAnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "answer", Type: field.TypeInt},
		{Name: "form_response_id", Type: field.TypeInt},
		{Name: "question_id", Type: field.TypeInt},
	}
	// HistoryAnswersTable holds the schema information for the "history_answers" table.
	HistoryAnswersTable = &schema.Table{
		Name:       "history_answers",
		Columns:    HistoryAnswersColumns,
		PrimaryKey: []*schema.Column{HistoryAnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "history_answers_form_responses_history_answers",
				Columns:    []*schema.Column{HistoryAnswersColumns[5]},
				RefColumns: []*schema.Column{FormResponsesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "history_answers_questions_history_answers",
				Columns:    []*schema.Column{HistoryAnswersColumns[6]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "text", Type: field.TypeString},
		{Name: "language", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "example", Type: field.TypeString},
		{Name: "order", Type: field.TypeInt},
		{Name: "category_id", Type: field.TypeInt},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questions_question_categories_questions",
				Columns:    []*schema.Column{QuestionsColumns[9]},
				RefColumns: []*schema.Column{QuestionCategoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// QuestionCategoriesColumns holds the columns for the "question_categories" table.
	QuestionCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "order", Type: field.TypeInt},
		{Name: "language", Type: field.TypeString},
	}
	// QuestionCategoriesTable holds the schema information for the "question_categories" table.
	QuestionCategoriesTable = &schema.Table{
		Name:       "question_categories",
		Columns:    QuestionCategoriesColumns,
		PrimaryKey: []*schema.Column{QuestionCategoriesColumns[0]},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "access_token", Type: field.TypeString, Size: 520},
		{Name: "refresh_token", Type: field.TypeString, Size: 520},
		{Name: "access_token_expires_at", Type: field.TypeTime},
		{Name: "refresh_token_expires_at", Type: field.TypeTime},
		{Name: "revoked", Type: field.TypeBool},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tokens_users_tokens",
				Columns:    []*schema.Column{TokensColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 100},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true, Size: 150},
		{Name: "password", Type: field.TypeString, Size: 255},
		{Name: "active", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActivationTokensTable,
		ExamplesTable,
		FormResponsesTable,
		HistoryAnswersTable,
		QuestionsTable,
		QuestionCategoriesTable,
		TokensTable,
		UsersTable,
	}
)

func init() {
	ActivationTokensTable.ForeignKeys[0].RefTable = UsersTable
	FormResponsesTable.ForeignKeys[0].RefTable = UsersTable
	HistoryAnswersTable.ForeignKeys[0].RefTable = FormResponsesTable
	HistoryAnswersTable.ForeignKeys[1].RefTable = QuestionsTable
	QuestionsTable.ForeignKeys[0].RefTable = QuestionCategoriesTable
	TokensTable.ForeignKeys[0].RefTable = UsersTable
}
