// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/questions"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HistoryAnswerCreate is the builder for creating a History_Answer entity.
type HistoryAnswerCreate struct {
	config
	mutation *HistoryAnswerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (hac *HistoryAnswerCreate) SetCreatedAt(t time.Time) *HistoryAnswerCreate {
	hac.mutation.SetCreatedAt(t)
	return hac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hac *HistoryAnswerCreate) SetNillableCreatedAt(t *time.Time) *HistoryAnswerCreate {
	if t != nil {
		hac.SetCreatedAt(*t)
	}
	return hac
}

// SetUpdatedAt sets the "updated_at" field.
func (hac *HistoryAnswerCreate) SetUpdatedAt(t time.Time) *HistoryAnswerCreate {
	hac.mutation.SetUpdatedAt(t)
	return hac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hac *HistoryAnswerCreate) SetNillableUpdatedAt(t *time.Time) *HistoryAnswerCreate {
	if t != nil {
		hac.SetUpdatedAt(*t)
	}
	return hac
}

// SetDeletedAt sets the "deleted_at" field.
func (hac *HistoryAnswerCreate) SetDeletedAt(t time.Time) *HistoryAnswerCreate {
	hac.mutation.SetDeletedAt(t)
	return hac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hac *HistoryAnswerCreate) SetNillableDeletedAt(t *time.Time) *HistoryAnswerCreate {
	if t != nil {
		hac.SetDeletedAt(*t)
	}
	return hac
}

// SetFormResponseID sets the "form_response_id" field.
func (hac *HistoryAnswerCreate) SetFormResponseID(i int) *HistoryAnswerCreate {
	hac.mutation.SetFormResponseID(i)
	return hac
}

// SetQuestionID sets the "question_id" field.
func (hac *HistoryAnswerCreate) SetQuestionID(i int) *HistoryAnswerCreate {
	hac.mutation.SetQuestionID(i)
	return hac
}

// SetAnswer sets the "answer" field.
func (hac *HistoryAnswerCreate) SetAnswer(i int) *HistoryAnswerCreate {
	hac.mutation.SetAnswer(i)
	return hac
}

// SetFormResponse sets the "form_response" edge to the Form_Response entity.
func (hac *HistoryAnswerCreate) SetFormResponse(f *Form_Response) *HistoryAnswerCreate {
	return hac.SetFormResponseID(f.ID)
}

// SetQuestion sets the "question" edge to the Questions entity.
func (hac *HistoryAnswerCreate) SetQuestion(q *Questions) *HistoryAnswerCreate {
	return hac.SetQuestionID(q.ID)
}

// Mutation returns the HistoryAnswerMutation object of the builder.
func (hac *HistoryAnswerCreate) Mutation() *HistoryAnswerMutation {
	return hac.mutation
}

// Save creates the History_Answer in the database.
func (hac *HistoryAnswerCreate) Save(ctx context.Context) (*History_Answer, error) {
	hac.defaults()
	return withHooks(ctx, hac.sqlSave, hac.mutation, hac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hac *HistoryAnswerCreate) SaveX(ctx context.Context) *History_Answer {
	v, err := hac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hac *HistoryAnswerCreate) Exec(ctx context.Context) error {
	_, err := hac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hac *HistoryAnswerCreate) ExecX(ctx context.Context) {
	if err := hac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hac *HistoryAnswerCreate) defaults() {
	if _, ok := hac.mutation.CreatedAt(); !ok {
		v := history_answer.DefaultCreatedAt()
		hac.mutation.SetCreatedAt(v)
	}
	if _, ok := hac.mutation.UpdatedAt(); !ok {
		v := history_answer.DefaultUpdatedAt()
		hac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hac *HistoryAnswerCreate) check() error {
	if _, ok := hac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "History_Answer.created_at"`)}
	}
	if _, ok := hac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "History_Answer.updated_at"`)}
	}
	if _, ok := hac.mutation.FormResponseID(); !ok {
		return &ValidationError{Name: "form_response_id", err: errors.New(`ent: missing required field "History_Answer.form_response_id"`)}
	}
	if v, ok := hac.mutation.FormResponseID(); ok {
		if err := history_answer.FormResponseIDValidator(v); err != nil {
			return &ValidationError{Name: "form_response_id", err: fmt.Errorf(`ent: validator failed for field "History_Answer.form_response_id": %w`, err)}
		}
	}
	if _, ok := hac.mutation.QuestionID(); !ok {
		return &ValidationError{Name: "question_id", err: errors.New(`ent: missing required field "History_Answer.question_id"`)}
	}
	if v, ok := hac.mutation.QuestionID(); ok {
		if err := history_answer.QuestionIDValidator(v); err != nil {
			return &ValidationError{Name: "question_id", err: fmt.Errorf(`ent: validator failed for field "History_Answer.question_id": %w`, err)}
		}
	}
	if _, ok := hac.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`ent: missing required field "History_Answer.answer"`)}
	}
	if v, ok := hac.mutation.Answer(); ok {
		if err := history_answer.AnswerValidator(v); err != nil {
			return &ValidationError{Name: "answer", err: fmt.Errorf(`ent: validator failed for field "History_Answer.answer": %w`, err)}
		}
	}
	if len(hac.mutation.FormResponseIDs()) == 0 {
		return &ValidationError{Name: "form_response", err: errors.New(`ent: missing required edge "History_Answer.form_response"`)}
	}
	if len(hac.mutation.QuestionIDs()) == 0 {
		return &ValidationError{Name: "question", err: errors.New(`ent: missing required edge "History_Answer.question"`)}
	}
	return nil
}

func (hac *HistoryAnswerCreate) sqlSave(ctx context.Context) (*History_Answer, error) {
	if err := hac.check(); err != nil {
		return nil, err
	}
	_node, _spec := hac.createSpec()
	if err := sqlgraph.CreateNode(ctx, hac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hac.mutation.id = &_node.ID
	hac.mutation.done = true
	return _node, nil
}

func (hac *HistoryAnswerCreate) createSpec() (*History_Answer, *sqlgraph.CreateSpec) {
	var (
		_node = &History_Answer{config: hac.config}
		_spec = sqlgraph.NewCreateSpec(history_answer.Table, sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt))
	)
	if value, ok := hac.mutation.CreatedAt(); ok {
		_spec.SetField(history_answer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hac.mutation.UpdatedAt(); ok {
		_spec.SetField(history_answer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hac.mutation.DeletedAt(); ok {
		_spec.SetField(history_answer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := hac.mutation.Answer(); ok {
		_spec.SetField(history_answer.FieldAnswer, field.TypeInt, value)
		_node.Answer = value
	}
	if nodes := hac.mutation.FormResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.FormResponseTable,
			Columns: []string{history_answer.FormResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form_response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FormResponseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hac.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.QuestionTable,
			Columns: []string{history_answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.QuestionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HistoryAnswerCreateBulk is the builder for creating many History_Answer entities in bulk.
type HistoryAnswerCreateBulk struct {
	config
	err      error
	builders []*HistoryAnswerCreate
}

// Save creates the History_Answer entities in the database.
func (hacb *HistoryAnswerCreateBulk) Save(ctx context.Context) ([]*History_Answer, error) {
	if hacb.err != nil {
		return nil, hacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hacb.builders))
	nodes := make([]*History_Answer, len(hacb.builders))
	mutators := make([]Mutator, len(hacb.builders))
	for i := range hacb.builders {
		func(i int, root context.Context) {
			builder := hacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HistoryAnswerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hacb *HistoryAnswerCreateBulk) SaveX(ctx context.Context) []*History_Answer {
	v, err := hacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hacb *HistoryAnswerCreateBulk) Exec(ctx context.Context) error {
	_, err := hacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hacb *HistoryAnswerCreateBulk) ExecX(ctx context.Context) {
	if err := hacb.Exec(ctx); err != nil {
		panic(err)
	}
}
