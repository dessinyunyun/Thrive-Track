// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"go-gin/database/ent/predicate"
	"go-gin/database/ent/question_category"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionCategoryDelete is the builder for deleting a Question_Category entity.
type QuestionCategoryDelete struct {
	config
	hooks    []Hook
	mutation *QuestionCategoryMutation
}

// Where appends a list predicates to the QuestionCategoryDelete builder.
func (qcd *QuestionCategoryDelete) Where(ps ...predicate.Question_Category) *QuestionCategoryDelete {
	qcd.mutation.Where(ps...)
	return qcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qcd *QuestionCategoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qcd.sqlExec, qcd.mutation, qcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qcd *QuestionCategoryDelete) ExecX(ctx context.Context) int {
	n, err := qcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qcd *QuestionCategoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(question_category.Table, sqlgraph.NewFieldSpec(question_category.FieldID, field.TypeInt))
	if ps := qcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qcd.mutation.done = true
	return affected, err
}

// QuestionCategoryDeleteOne is the builder for deleting a single Question_Category entity.
type QuestionCategoryDeleteOne struct {
	qcd *QuestionCategoryDelete
}

// Where appends a list predicates to the QuestionCategoryDelete builder.
func (qcdo *QuestionCategoryDeleteOne) Where(ps ...predicate.Question_Category) *QuestionCategoryDeleteOne {
	qcdo.qcd.mutation.Where(ps...)
	return qcdo
}

// Exec executes the deletion query.
func (qcdo *QuestionCategoryDeleteOne) Exec(ctx context.Context) error {
	n, err := qcdo.qcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{question_category.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qcdo *QuestionCategoryDeleteOne) ExecX(ctx context.Context) {
	if err := qcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
