// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Form_Response is the model entity for the Form_Response schema.
type Form_Response struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// TotalScore holds the value of the "total_score" field.
	TotalScore uint8 `json:"total_score,omitempty"`
	// DepressionLevel holds the value of the "depression_level" field.
	DepressionLevel string `json:"depression_level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Form_ResponseQuery when eager-loading is set.
	Edges        Form_ResponseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Form_ResponseEdges holds the relations/edges for other nodes in the graph.
type Form_ResponseEdges struct {
	// HistoryAnswers holds the value of the history_answers edge.
	HistoryAnswers []*History_Answer `json:"history_answers,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HistoryAnswersOrErr returns the HistoryAnswers value or an error if the edge
// was not loaded in eager-loading.
func (e Form_ResponseEdges) HistoryAnswersOrErr() ([]*History_Answer, error) {
	if e.loadedTypes[0] {
		return e.HistoryAnswers, nil
	}
	return nil, &NotLoadedError{edge: "history_answers"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Form_ResponseEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Form_Response) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case form_response.FieldID, form_response.FieldTotalScore:
			values[i] = new(sql.NullInt64)
		case form_response.FieldDepressionLevel:
			values[i] = new(sql.NullString)
		case form_response.FieldCreatedAt, form_response.FieldUpdatedAt, form_response.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case form_response.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Form_Response fields.
func (fr *Form_Response) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case form_response.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fr.ID = int(value.Int64)
		case form_response.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fr.CreatedAt = value.Time
			}
		case form_response.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fr.UpdatedAt = value.Time
			}
		case form_response.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fr.DeletedAt = new(time.Time)
				*fr.DeletedAt = value.Time
			}
		case form_response.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				fr.UserID = *value
			}
		case form_response.FieldTotalScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_score", values[i])
			} else if value.Valid {
				fr.TotalScore = uint8(value.Int64)
			}
		case form_response.FieldDepressionLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field depression_level", values[i])
			} else if value.Valid {
				fr.DepressionLevel = value.String
			}
		default:
			fr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Form_Response.
// This includes values selected through modifiers, order, etc.
func (fr *Form_Response) Value(name string) (ent.Value, error) {
	return fr.selectValues.Get(name)
}

// QueryHistoryAnswers queries the "history_answers" edge of the Form_Response entity.
func (fr *Form_Response) QueryHistoryAnswers() *HistoryAnswerQuery {
	return NewFormResponseClient(fr.config).QueryHistoryAnswers(fr)
}

// QueryUser queries the "user" edge of the Form_Response entity.
func (fr *Form_Response) QueryUser() *UserQuery {
	return NewFormResponseClient(fr.config).QueryUser(fr)
}

// Update returns a builder for updating this Form_Response.
// Note that you need to call Form_Response.Unwrap() before calling this method if this Form_Response
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *Form_Response) Update() *FormResponseUpdateOne {
	return NewFormResponseClient(fr.config).UpdateOne(fr)
}

// Unwrap unwraps the Form_Response entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *Form_Response) Unwrap() *Form_Response {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Form_Response is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *Form_Response) String() string {
	var builder strings.Builder
	builder.WriteString("Form_Response(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := fr.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", fr.UserID))
	builder.WriteString(", ")
	builder.WriteString("total_score=")
	builder.WriteString(fmt.Sprintf("%v", fr.TotalScore))
	builder.WriteString(", ")
	builder.WriteString("depression_level=")
	builder.WriteString(fr.DepressionLevel)
	builder.WriteByte(')')
	return builder.String()
}

// Form_Responses is a parsable slice of Form_Response.
type Form_Responses []*Form_Response
