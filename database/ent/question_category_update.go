// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/predicate"
	"go-gin/database/ent/question"
	"go-gin/database/ent/question_category"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionCategoryUpdate is the builder for updating Question_Category entities.
type QuestionCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionCategoryMutation
}

// Where appends a list predicates to the QuestionCategoryUpdate builder.
func (qcu *QuestionCategoryUpdate) Where(ps ...predicate.Question_Category) *QuestionCategoryUpdate {
	qcu.mutation.Where(ps...)
	return qcu
}

// SetName sets the "name" field.
func (qcu *QuestionCategoryUpdate) SetName(s string) *QuestionCategoryUpdate {
	qcu.mutation.SetName(s)
	return qcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (qcu *QuestionCategoryUpdate) SetNillableName(s *string) *QuestionCategoryUpdate {
	if s != nil {
		qcu.SetName(*s)
	}
	return qcu
}

// SetOrder sets the "order" field.
func (qcu *QuestionCategoryUpdate) SetOrder(i int) *QuestionCategoryUpdate {
	qcu.mutation.ResetOrder()
	qcu.mutation.SetOrder(i)
	return qcu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (qcu *QuestionCategoryUpdate) SetNillableOrder(i *int) *QuestionCategoryUpdate {
	if i != nil {
		qcu.SetOrder(*i)
	}
	return qcu
}

// AddOrder adds i to the "order" field.
func (qcu *QuestionCategoryUpdate) AddOrder(i int) *QuestionCategoryUpdate {
	qcu.mutation.AddOrder(i)
	return qcu
}

// SetLanguage sets the "language" field.
func (qcu *QuestionCategoryUpdate) SetLanguage(s string) *QuestionCategoryUpdate {
	qcu.mutation.SetLanguage(s)
	return qcu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (qcu *QuestionCategoryUpdate) SetNillableLanguage(s *string) *QuestionCategoryUpdate {
	if s != nil {
		qcu.SetLanguage(*s)
	}
	return qcu
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qcu *QuestionCategoryUpdate) AddQuestionIDs(ids ...int) *QuestionCategoryUpdate {
	qcu.mutation.AddQuestionIDs(ids...)
	return qcu
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qcu *QuestionCategoryUpdate) AddQuestions(q ...*Question) *QuestionCategoryUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcu.AddQuestionIDs(ids...)
}

// Mutation returns the QuestionCategoryMutation object of the builder.
func (qcu *QuestionCategoryUpdate) Mutation() *QuestionCategoryMutation {
	return qcu.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (qcu *QuestionCategoryUpdate) ClearQuestions() *QuestionCategoryUpdate {
	qcu.mutation.ClearQuestions()
	return qcu
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (qcu *QuestionCategoryUpdate) RemoveQuestionIDs(ids ...int) *QuestionCategoryUpdate {
	qcu.mutation.RemoveQuestionIDs(ids...)
	return qcu
}

// RemoveQuestions removes "questions" edges to Question entities.
func (qcu *QuestionCategoryUpdate) RemoveQuestions(q ...*Question) *QuestionCategoryUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcu.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qcu *QuestionCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qcu.sqlSave, qcu.mutation, qcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcu *QuestionCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := qcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qcu *QuestionCategoryUpdate) Exec(ctx context.Context) error {
	_, err := qcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcu *QuestionCategoryUpdate) ExecX(ctx context.Context) {
	if err := qcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcu *QuestionCategoryUpdate) check() error {
	if v, ok := qcu.mutation.Name(); ok {
		if err := question_category.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Question_Category.name": %w`, err)}
		}
	}
	if v, ok := qcu.mutation.Language(); ok {
		if err := question_category.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Question_Category.language": %w`, err)}
		}
	}
	return nil
}

func (qcu *QuestionCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(question_category.Table, question_category.Columns, sqlgraph.NewFieldSpec(question_category.FieldID, field.TypeInt))
	if ps := qcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcu.mutation.Name(); ok {
		_spec.SetField(question_category.FieldName, field.TypeString, value)
	}
	if value, ok := qcu.mutation.Order(); ok {
		_spec.SetField(question_category.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qcu.mutation.AddedOrder(); ok {
		_spec.AddField(question_category.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qcu.mutation.Language(); ok {
		_spec.SetField(question_category.FieldLanguage, field.TypeString, value)
	}
	if qcu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question_category.QuestionsTable,
			Columns: []string{question_category.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !qcu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question_category.QuestionsTable,
			Columns: []string{question_category.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question_category.QuestionsTable,
			Columns: []string{question_category.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question_category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qcu.mutation.done = true
	return n, nil
}

// QuestionCategoryUpdateOne is the builder for updating a single Question_Category entity.
type QuestionCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionCategoryMutation
}

// SetName sets the "name" field.
func (qcuo *QuestionCategoryUpdateOne) SetName(s string) *QuestionCategoryUpdateOne {
	qcuo.mutation.SetName(s)
	return qcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (qcuo *QuestionCategoryUpdateOne) SetNillableName(s *string) *QuestionCategoryUpdateOne {
	if s != nil {
		qcuo.SetName(*s)
	}
	return qcuo
}

// SetOrder sets the "order" field.
func (qcuo *QuestionCategoryUpdateOne) SetOrder(i int) *QuestionCategoryUpdateOne {
	qcuo.mutation.ResetOrder()
	qcuo.mutation.SetOrder(i)
	return qcuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (qcuo *QuestionCategoryUpdateOne) SetNillableOrder(i *int) *QuestionCategoryUpdateOne {
	if i != nil {
		qcuo.SetOrder(*i)
	}
	return qcuo
}

// AddOrder adds i to the "order" field.
func (qcuo *QuestionCategoryUpdateOne) AddOrder(i int) *QuestionCategoryUpdateOne {
	qcuo.mutation.AddOrder(i)
	return qcuo
}

// SetLanguage sets the "language" field.
func (qcuo *QuestionCategoryUpdateOne) SetLanguage(s string) *QuestionCategoryUpdateOne {
	qcuo.mutation.SetLanguage(s)
	return qcuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (qcuo *QuestionCategoryUpdateOne) SetNillableLanguage(s *string) *QuestionCategoryUpdateOne {
	if s != nil {
		qcuo.SetLanguage(*s)
	}
	return qcuo
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qcuo *QuestionCategoryUpdateOne) AddQuestionIDs(ids ...int) *QuestionCategoryUpdateOne {
	qcuo.mutation.AddQuestionIDs(ids...)
	return qcuo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qcuo *QuestionCategoryUpdateOne) AddQuestions(q ...*Question) *QuestionCategoryUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcuo.AddQuestionIDs(ids...)
}

// Mutation returns the QuestionCategoryMutation object of the builder.
func (qcuo *QuestionCategoryUpdateOne) Mutation() *QuestionCategoryMutation {
	return qcuo.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (qcuo *QuestionCategoryUpdateOne) ClearQuestions() *QuestionCategoryUpdateOne {
	qcuo.mutation.ClearQuestions()
	return qcuo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (qcuo *QuestionCategoryUpdateOne) RemoveQuestionIDs(ids ...int) *QuestionCategoryUpdateOne {
	qcuo.mutation.RemoveQuestionIDs(ids...)
	return qcuo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (qcuo *QuestionCategoryUpdateOne) RemoveQuestions(q ...*Question) *QuestionCategoryUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcuo.RemoveQuestionIDs(ids...)
}

// Where appends a list predicates to the QuestionCategoryUpdate builder.
func (qcuo *QuestionCategoryUpdateOne) Where(ps ...predicate.Question_Category) *QuestionCategoryUpdateOne {
	qcuo.mutation.Where(ps...)
	return qcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qcuo *QuestionCategoryUpdateOne) Select(field string, fields ...string) *QuestionCategoryUpdateOne {
	qcuo.fields = append([]string{field}, fields...)
	return qcuo
}

// Save executes the query and returns the updated Question_Category entity.
func (qcuo *QuestionCategoryUpdateOne) Save(ctx context.Context) (*Question_Category, error) {
	return withHooks(ctx, qcuo.sqlSave, qcuo.mutation, qcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcuo *QuestionCategoryUpdateOne) SaveX(ctx context.Context) *Question_Category {
	node, err := qcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qcuo *QuestionCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := qcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcuo *QuestionCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := qcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcuo *QuestionCategoryUpdateOne) check() error {
	if v, ok := qcuo.mutation.Name(); ok {
		if err := question_category.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Question_Category.name": %w`, err)}
		}
	}
	if v, ok := qcuo.mutation.Language(); ok {
		if err := question_category.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Question_Category.language": %w`, err)}
		}
	}
	return nil
}

func (qcuo *QuestionCategoryUpdateOne) sqlSave(ctx context.Context) (_node *Question_Category, err error) {
	if err := qcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question_category.Table, question_category.Columns, sqlgraph.NewFieldSpec(question_category.FieldID, field.TypeInt))
	id, ok := qcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question_Category.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question_category.FieldID)
		for _, f := range fields {
			if !question_category.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question_category.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcuo.mutation.Name(); ok {
		_spec.SetField(question_category.FieldName, field.TypeString, value)
	}
	if value, ok := qcuo.mutation.Order(); ok {
		_spec.SetField(question_category.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qcuo.mutation.AddedOrder(); ok {
		_spec.AddField(question_category.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qcuo.mutation.Language(); ok {
		_spec.SetField(question_category.FieldLanguage, field.TypeString, value)
	}
	if qcuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question_category.QuestionsTable,
			Columns: []string{question_category.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !qcuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question_category.QuestionsTable,
			Columns: []string{question_category.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question_category.QuestionsTable,
			Columns: []string{question_category.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question_Category{config: qcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question_category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qcuo.mutation.done = true
	return _node, nil
}
