// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"go-gin/database/ent/migrate"

	"go-gin/database/ent/activation_token"
	"go-gin/database/ent/category_questions"
	"go-gin/database/ent/example"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/questions"
	"go-gin/database/ent/session"
	"go-gin/database/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activation_token is the client for interacting with the Activation_token builders.
	Activation_token *ActivationTokenClient
	// Category_Questions is the client for interacting with the Category_Questions builders.
	Category_Questions *CategoryQuestionsClient
	// Example is the client for interacting with the Example builders.
	Example *ExampleClient
	// Form_Response is the client for interacting with the Form_Response builders.
	Form_Response *FormResponseClient
	// History_Answer is the client for interacting with the History_Answer builders.
	History_Answer *HistoryAnswerClient
	// Questions is the client for interacting with the Questions builders.
	Questions *QuestionsClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activation_token = NewActivationTokenClient(c.config)
	c.Category_Questions = NewCategoryQuestionsClient(c.config)
	c.Example = NewExampleClient(c.config)
	c.Form_Response = NewFormResponseClient(c.config)
	c.History_Answer = NewHistoryAnswerClient(c.config)
	c.Questions = NewQuestionsClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Activation_token:   NewActivationTokenClient(cfg),
		Category_Questions: NewCategoryQuestionsClient(cfg),
		Example:            NewExampleClient(cfg),
		Form_Response:      NewFormResponseClient(cfg),
		History_Answer:     NewHistoryAnswerClient(cfg),
		Questions:          NewQuestionsClient(cfg),
		Session:            NewSessionClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Activation_token:   NewActivationTokenClient(cfg),
		Category_Questions: NewCategoryQuestionsClient(cfg),
		Example:            NewExampleClient(cfg),
		Form_Response:      NewFormResponseClient(cfg),
		History_Answer:     NewHistoryAnswerClient(cfg),
		Questions:          NewQuestionsClient(cfg),
		Session:            NewSessionClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activation_token.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Activation_token, c.Category_Questions, c.Example, c.Form_Response,
		c.History_Answer, c.Questions, c.Session, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Activation_token, c.Category_Questions, c.Example, c.Form_Response,
		c.History_Answer, c.Questions, c.Session, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActivationTokenMutation:
		return c.Activation_token.mutate(ctx, m)
	case *CategoryQuestionsMutation:
		return c.Category_Questions.mutate(ctx, m)
	case *ExampleMutation:
		return c.Example.mutate(ctx, m)
	case *FormResponseMutation:
		return c.Form_Response.mutate(ctx, m)
	case *HistoryAnswerMutation:
		return c.History_Answer.mutate(ctx, m)
	case *QuestionsMutation:
		return c.Questions.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActivationTokenClient is a client for the Activation_token schema.
type ActivationTokenClient struct {
	config
}

// NewActivationTokenClient returns a client for the Activation_token from the given config.
func NewActivationTokenClient(c config) *ActivationTokenClient {
	return &ActivationTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activation_token.Hooks(f(g(h())))`.
func (c *ActivationTokenClient) Use(hooks ...Hook) {
	c.hooks.Activation_token = append(c.hooks.Activation_token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `activation_token.Intercept(f(g(h())))`.
func (c *ActivationTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Activation_token = append(c.inters.Activation_token, interceptors...)
}

// Create returns a builder for creating a Activation_token entity.
func (c *ActivationTokenClient) Create() *ActivationTokenCreate {
	mutation := newActivationTokenMutation(c.config, OpCreate)
	return &ActivationTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activation_token entities.
func (c *ActivationTokenClient) CreateBulk(builders ...*ActivationTokenCreate) *ActivationTokenCreateBulk {
	return &ActivationTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActivationTokenClient) MapCreateBulk(slice any, setFunc func(*ActivationTokenCreate, int)) *ActivationTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActivationTokenCreateBulk{err: fmt.Errorf("calling to ActivationTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActivationTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActivationTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activation_token.
func (c *ActivationTokenClient) Update() *ActivationTokenUpdate {
	mutation := newActivationTokenMutation(c.config, OpUpdate)
	return &ActivationTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivationTokenClient) UpdateOne(at *Activation_token) *ActivationTokenUpdateOne {
	mutation := newActivationTokenMutation(c.config, OpUpdateOne, withActivation_token(at))
	return &ActivationTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivationTokenClient) UpdateOneID(id uuid.UUID) *ActivationTokenUpdateOne {
	mutation := newActivationTokenMutation(c.config, OpUpdateOne, withActivation_tokenID(id))
	return &ActivationTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activation_token.
func (c *ActivationTokenClient) Delete() *ActivationTokenDelete {
	mutation := newActivationTokenMutation(c.config, OpDelete)
	return &ActivationTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActivationTokenClient) DeleteOne(at *Activation_token) *ActivationTokenDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActivationTokenClient) DeleteOneID(id uuid.UUID) *ActivationTokenDeleteOne {
	builder := c.Delete().Where(activation_token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivationTokenDeleteOne{builder}
}

// Query returns a query builder for Activation_token.
func (c *ActivationTokenClient) Query() *ActivationTokenQuery {
	return &ActivationTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActivationToken},
		inters: c.Interceptors(),
	}
}

// Get returns a Activation_token entity by its id.
func (c *ActivationTokenClient) Get(ctx context.Context, id uuid.UUID) (*Activation_token, error) {
	return c.Query().Where(activation_token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivationTokenClient) GetX(ctx context.Context, id uuid.UUID) *Activation_token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Activation_token.
func (c *ActivationTokenClient) QueryUser(at *Activation_token) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activation_token.Table, activation_token.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, activation_token.UserTable, activation_token.UserColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivationTokenClient) Hooks() []Hook {
	return c.hooks.Activation_token
}

// Interceptors returns the client interceptors.
func (c *ActivationTokenClient) Interceptors() []Interceptor {
	return c.inters.Activation_token
}

func (c *ActivationTokenClient) mutate(ctx context.Context, m *ActivationTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActivationTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActivationTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActivationTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActivationTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Activation_token mutation op: %q", m.Op())
	}
}

// CategoryQuestionsClient is a client for the Category_Questions schema.
type CategoryQuestionsClient struct {
	config
}

// NewCategoryQuestionsClient returns a client for the Category_Questions from the given config.
func NewCategoryQuestionsClient(c config) *CategoryQuestionsClient {
	return &CategoryQuestionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category_questions.Hooks(f(g(h())))`.
func (c *CategoryQuestionsClient) Use(hooks ...Hook) {
	c.hooks.Category_Questions = append(c.hooks.Category_Questions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `category_questions.Intercept(f(g(h())))`.
func (c *CategoryQuestionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Category_Questions = append(c.inters.Category_Questions, interceptors...)
}

// Create returns a builder for creating a Category_Questions entity.
func (c *CategoryQuestionsClient) Create() *CategoryQuestionsCreate {
	mutation := newCategoryQuestionsMutation(c.config, OpCreate)
	return &CategoryQuestionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category_Questions entities.
func (c *CategoryQuestionsClient) CreateBulk(builders ...*CategoryQuestionsCreate) *CategoryQuestionsCreateBulk {
	return &CategoryQuestionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CategoryQuestionsClient) MapCreateBulk(slice any, setFunc func(*CategoryQuestionsCreate, int)) *CategoryQuestionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CategoryQuestionsCreateBulk{err: fmt.Errorf("calling to CategoryQuestionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CategoryQuestionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CategoryQuestionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category_Questions.
func (c *CategoryQuestionsClient) Update() *CategoryQuestionsUpdate {
	mutation := newCategoryQuestionsMutation(c.config, OpUpdate)
	return &CategoryQuestionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryQuestionsClient) UpdateOne(cq *Category_Questions) *CategoryQuestionsUpdateOne {
	mutation := newCategoryQuestionsMutation(c.config, OpUpdateOne, withCategory_Questions(cq))
	return &CategoryQuestionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryQuestionsClient) UpdateOneID(id int) *CategoryQuestionsUpdateOne {
	mutation := newCategoryQuestionsMutation(c.config, OpUpdateOne, withCategory_QuestionsID(id))
	return &CategoryQuestionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category_Questions.
func (c *CategoryQuestionsClient) Delete() *CategoryQuestionsDelete {
	mutation := newCategoryQuestionsMutation(c.config, OpDelete)
	return &CategoryQuestionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryQuestionsClient) DeleteOne(cq *Category_Questions) *CategoryQuestionsDeleteOne {
	return c.DeleteOneID(cq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryQuestionsClient) DeleteOneID(id int) *CategoryQuestionsDeleteOne {
	builder := c.Delete().Where(category_questions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryQuestionsDeleteOne{builder}
}

// Query returns a query builder for Category_Questions.
func (c *CategoryQuestionsClient) Query() *CategoryQuestionsQuery {
	return &CategoryQuestionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategoryQuestions},
		inters: c.Interceptors(),
	}
}

// Get returns a Category_Questions entity by its id.
func (c *CategoryQuestionsClient) Get(ctx context.Context, id int) (*Category_Questions, error) {
	return c.Query().Where(category_questions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryQuestionsClient) GetX(ctx context.Context, id int) *Category_Questions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CategoryQuestionsClient) Hooks() []Hook {
	return c.hooks.Category_Questions
}

// Interceptors returns the client interceptors.
func (c *CategoryQuestionsClient) Interceptors() []Interceptor {
	return c.inters.Category_Questions
}

func (c *CategoryQuestionsClient) mutate(ctx context.Context, m *CategoryQuestionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryQuestionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryQuestionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryQuestionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryQuestionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Category_Questions mutation op: %q", m.Op())
	}
}

// ExampleClient is a client for the Example schema.
type ExampleClient struct {
	config
}

// NewExampleClient returns a client for the Example from the given config.
func NewExampleClient(c config) *ExampleClient {
	return &ExampleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `example.Hooks(f(g(h())))`.
func (c *ExampleClient) Use(hooks ...Hook) {
	c.hooks.Example = append(c.hooks.Example, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `example.Intercept(f(g(h())))`.
func (c *ExampleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Example = append(c.inters.Example, interceptors...)
}

// Create returns a builder for creating a Example entity.
func (c *ExampleClient) Create() *ExampleCreate {
	mutation := newExampleMutation(c.config, OpCreate)
	return &ExampleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Example entities.
func (c *ExampleClient) CreateBulk(builders ...*ExampleCreate) *ExampleCreateBulk {
	return &ExampleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExampleClient) MapCreateBulk(slice any, setFunc func(*ExampleCreate, int)) *ExampleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExampleCreateBulk{err: fmt.Errorf("calling to ExampleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExampleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExampleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Example.
func (c *ExampleClient) Update() *ExampleUpdate {
	mutation := newExampleMutation(c.config, OpUpdate)
	return &ExampleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExampleClient) UpdateOne(e *Example) *ExampleUpdateOne {
	mutation := newExampleMutation(c.config, OpUpdateOne, withExample(e))
	return &ExampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExampleClient) UpdateOneID(id uuid.UUID) *ExampleUpdateOne {
	mutation := newExampleMutation(c.config, OpUpdateOne, withExampleID(id))
	return &ExampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Example.
func (c *ExampleClient) Delete() *ExampleDelete {
	mutation := newExampleMutation(c.config, OpDelete)
	return &ExampleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExampleClient) DeleteOne(e *Example) *ExampleDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExampleClient) DeleteOneID(id uuid.UUID) *ExampleDeleteOne {
	builder := c.Delete().Where(example.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExampleDeleteOne{builder}
}

// Query returns a query builder for Example.
func (c *ExampleClient) Query() *ExampleQuery {
	return &ExampleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExample},
		inters: c.Interceptors(),
	}
}

// Get returns a Example entity by its id.
func (c *ExampleClient) Get(ctx context.Context, id uuid.UUID) (*Example, error) {
	return c.Query().Where(example.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExampleClient) GetX(ctx context.Context, id uuid.UUID) *Example {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExampleClient) Hooks() []Hook {
	return c.hooks.Example
}

// Interceptors returns the client interceptors.
func (c *ExampleClient) Interceptors() []Interceptor {
	return c.inters.Example
}

func (c *ExampleClient) mutate(ctx context.Context, m *ExampleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExampleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExampleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExampleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Example mutation op: %q", m.Op())
	}
}

// FormResponseClient is a client for the Form_Response schema.
type FormResponseClient struct {
	config
}

// NewFormResponseClient returns a client for the Form_Response from the given config.
func NewFormResponseClient(c config) *FormResponseClient {
	return &FormResponseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `form_response.Hooks(f(g(h())))`.
func (c *FormResponseClient) Use(hooks ...Hook) {
	c.hooks.Form_Response = append(c.hooks.Form_Response, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `form_response.Intercept(f(g(h())))`.
func (c *FormResponseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Form_Response = append(c.inters.Form_Response, interceptors...)
}

// Create returns a builder for creating a Form_Response entity.
func (c *FormResponseClient) Create() *FormResponseCreate {
	mutation := newFormResponseMutation(c.config, OpCreate)
	return &FormResponseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Form_Response entities.
func (c *FormResponseClient) CreateBulk(builders ...*FormResponseCreate) *FormResponseCreateBulk {
	return &FormResponseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FormResponseClient) MapCreateBulk(slice any, setFunc func(*FormResponseCreate, int)) *FormResponseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FormResponseCreateBulk{err: fmt.Errorf("calling to FormResponseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FormResponseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FormResponseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Form_Response.
func (c *FormResponseClient) Update() *FormResponseUpdate {
	mutation := newFormResponseMutation(c.config, OpUpdate)
	return &FormResponseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FormResponseClient) UpdateOne(fr *Form_Response) *FormResponseUpdateOne {
	mutation := newFormResponseMutation(c.config, OpUpdateOne, withForm_Response(fr))
	return &FormResponseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FormResponseClient) UpdateOneID(id int) *FormResponseUpdateOne {
	mutation := newFormResponseMutation(c.config, OpUpdateOne, withForm_ResponseID(id))
	return &FormResponseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Form_Response.
func (c *FormResponseClient) Delete() *FormResponseDelete {
	mutation := newFormResponseMutation(c.config, OpDelete)
	return &FormResponseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FormResponseClient) DeleteOne(fr *Form_Response) *FormResponseDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FormResponseClient) DeleteOneID(id int) *FormResponseDeleteOne {
	builder := c.Delete().Where(form_response.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FormResponseDeleteOne{builder}
}

// Query returns a query builder for Form_Response.
func (c *FormResponseClient) Query() *FormResponseQuery {
	return &FormResponseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFormResponse},
		inters: c.Interceptors(),
	}
}

// Get returns a Form_Response entity by its id.
func (c *FormResponseClient) Get(ctx context.Context, id int) (*Form_Response, error) {
	return c.Query().Where(form_response.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FormResponseClient) GetX(ctx context.Context, id int) *Form_Response {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHistoryAnswers queries the history_answers edge of a Form_Response.
func (c *FormResponseClient) QueryHistoryAnswers(fr *Form_Response) *HistoryAnswerQuery {
	query := (&HistoryAnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(form_response.Table, form_response.FieldID, id),
			sqlgraph.To(history_answer.Table, history_answer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, form_response.HistoryAnswersTable, form_response.HistoryAnswersColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Form_Response.
func (c *FormResponseClient) QueryUser(fr *Form_Response) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(form_response.Table, form_response.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, form_response.UserTable, form_response.UserColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FormResponseClient) Hooks() []Hook {
	return c.hooks.Form_Response
}

// Interceptors returns the client interceptors.
func (c *FormResponseClient) Interceptors() []Interceptor {
	return c.inters.Form_Response
}

func (c *FormResponseClient) mutate(ctx context.Context, m *FormResponseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FormResponseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FormResponseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FormResponseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FormResponseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Form_Response mutation op: %q", m.Op())
	}
}

// HistoryAnswerClient is a client for the History_Answer schema.
type HistoryAnswerClient struct {
	config
}

// NewHistoryAnswerClient returns a client for the History_Answer from the given config.
func NewHistoryAnswerClient(c config) *HistoryAnswerClient {
	return &HistoryAnswerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `history_answer.Hooks(f(g(h())))`.
func (c *HistoryAnswerClient) Use(hooks ...Hook) {
	c.hooks.History_Answer = append(c.hooks.History_Answer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `history_answer.Intercept(f(g(h())))`.
func (c *HistoryAnswerClient) Intercept(interceptors ...Interceptor) {
	c.inters.History_Answer = append(c.inters.History_Answer, interceptors...)
}

// Create returns a builder for creating a History_Answer entity.
func (c *HistoryAnswerClient) Create() *HistoryAnswerCreate {
	mutation := newHistoryAnswerMutation(c.config, OpCreate)
	return &HistoryAnswerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of History_Answer entities.
func (c *HistoryAnswerClient) CreateBulk(builders ...*HistoryAnswerCreate) *HistoryAnswerCreateBulk {
	return &HistoryAnswerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HistoryAnswerClient) MapCreateBulk(slice any, setFunc func(*HistoryAnswerCreate, int)) *HistoryAnswerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HistoryAnswerCreateBulk{err: fmt.Errorf("calling to HistoryAnswerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HistoryAnswerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HistoryAnswerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for History_Answer.
func (c *HistoryAnswerClient) Update() *HistoryAnswerUpdate {
	mutation := newHistoryAnswerMutation(c.config, OpUpdate)
	return &HistoryAnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HistoryAnswerClient) UpdateOne(ha *History_Answer) *HistoryAnswerUpdateOne {
	mutation := newHistoryAnswerMutation(c.config, OpUpdateOne, withHistory_Answer(ha))
	return &HistoryAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HistoryAnswerClient) UpdateOneID(id int) *HistoryAnswerUpdateOne {
	mutation := newHistoryAnswerMutation(c.config, OpUpdateOne, withHistory_AnswerID(id))
	return &HistoryAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for History_Answer.
func (c *HistoryAnswerClient) Delete() *HistoryAnswerDelete {
	mutation := newHistoryAnswerMutation(c.config, OpDelete)
	return &HistoryAnswerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HistoryAnswerClient) DeleteOne(ha *History_Answer) *HistoryAnswerDeleteOne {
	return c.DeleteOneID(ha.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HistoryAnswerClient) DeleteOneID(id int) *HistoryAnswerDeleteOne {
	builder := c.Delete().Where(history_answer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HistoryAnswerDeleteOne{builder}
}

// Query returns a query builder for History_Answer.
func (c *HistoryAnswerClient) Query() *HistoryAnswerQuery {
	return &HistoryAnswerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHistoryAnswer},
		inters: c.Interceptors(),
	}
}

// Get returns a History_Answer entity by its id.
func (c *HistoryAnswerClient) Get(ctx context.Context, id int) (*History_Answer, error) {
	return c.Query().Where(history_answer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HistoryAnswerClient) GetX(ctx context.Context, id int) *History_Answer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFormResponse queries the form_response edge of a History_Answer.
func (c *HistoryAnswerClient) QueryFormResponse(ha *History_Answer) *FormResponseQuery {
	query := (&FormResponseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(history_answer.Table, history_answer.FieldID, id),
			sqlgraph.To(form_response.Table, form_response.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, history_answer.FormResponseTable, history_answer.FormResponseColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestion queries the question edge of a History_Answer.
func (c *HistoryAnswerClient) QueryQuestion(ha *History_Answer) *QuestionsQuery {
	query := (&QuestionsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ha.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(history_answer.Table, history_answer.FieldID, id),
			sqlgraph.To(questions.Table, questions.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, history_answer.QuestionTable, history_answer.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(ha.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HistoryAnswerClient) Hooks() []Hook {
	return c.hooks.History_Answer
}

// Interceptors returns the client interceptors.
func (c *HistoryAnswerClient) Interceptors() []Interceptor {
	return c.inters.History_Answer
}

func (c *HistoryAnswerClient) mutate(ctx context.Context, m *HistoryAnswerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HistoryAnswerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HistoryAnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HistoryAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HistoryAnswerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown History_Answer mutation op: %q", m.Op())
	}
}

// QuestionsClient is a client for the Questions schema.
type QuestionsClient struct {
	config
}

// NewQuestionsClient returns a client for the Questions from the given config.
func NewQuestionsClient(c config) *QuestionsClient {
	return &QuestionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `questions.Hooks(f(g(h())))`.
func (c *QuestionsClient) Use(hooks ...Hook) {
	c.hooks.Questions = append(c.hooks.Questions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `questions.Intercept(f(g(h())))`.
func (c *QuestionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Questions = append(c.inters.Questions, interceptors...)
}

// Create returns a builder for creating a Questions entity.
func (c *QuestionsClient) Create() *QuestionsCreate {
	mutation := newQuestionsMutation(c.config, OpCreate)
	return &QuestionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Questions entities.
func (c *QuestionsClient) CreateBulk(builders ...*QuestionsCreate) *QuestionsCreateBulk {
	return &QuestionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QuestionsClient) MapCreateBulk(slice any, setFunc func(*QuestionsCreate, int)) *QuestionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QuestionsCreateBulk{err: fmt.Errorf("calling to QuestionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QuestionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QuestionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Questions.
func (c *QuestionsClient) Update() *QuestionsUpdate {
	mutation := newQuestionsMutation(c.config, OpUpdate)
	return &QuestionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionsClient) UpdateOne(q *Questions) *QuestionsUpdateOne {
	mutation := newQuestionsMutation(c.config, OpUpdateOne, withQuestions(q))
	return &QuestionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionsClient) UpdateOneID(id int) *QuestionsUpdateOne {
	mutation := newQuestionsMutation(c.config, OpUpdateOne, withQuestionsID(id))
	return &QuestionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Questions.
func (c *QuestionsClient) Delete() *QuestionsDelete {
	mutation := newQuestionsMutation(c.config, OpDelete)
	return &QuestionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionsClient) DeleteOne(q *Questions) *QuestionsDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionsClient) DeleteOneID(id int) *QuestionsDeleteOne {
	builder := c.Delete().Where(questions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionsDeleteOne{builder}
}

// Query returns a query builder for Questions.
func (c *QuestionsClient) Query() *QuestionsQuery {
	return &QuestionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestions},
		inters: c.Interceptors(),
	}
}

// Get returns a Questions entity by its id.
func (c *QuestionsClient) Get(ctx context.Context, id int) (*Questions, error) {
	return c.Query().Where(questions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionsClient) GetX(ctx context.Context, id int) *Questions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHistoryAnswers queries the history_answers edge of a Questions.
func (c *QuestionsClient) QueryHistoryAnswers(q *Questions) *HistoryAnswerQuery {
	query := (&HistoryAnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questions.Table, questions.FieldID, id),
			sqlgraph.To(history_answer.Table, history_answer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, questions.HistoryAnswersTable, questions.HistoryAnswersColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionsClient) Hooks() []Hook {
	return c.hooks.Questions
}

// Interceptors returns the client interceptors.
func (c *QuestionsClient) Interceptors() []Interceptor {
	return c.inters.Questions
}

func (c *QuestionsClient) mutate(ctx context.Context, m *QuestionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Questions mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionClient) MapCreateBulk(slice any, setFunc func(*SessionCreate, int)) *SessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionCreateBulk{err: fmt.Errorf("calling to SessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id uuid.UUID) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id uuid.UUID) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id uuid.UUID) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id uuid.UUID) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(s *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFormResponses queries the form_responses edge of a User.
func (c *UserClient) QueryFormResponses(u *User) *FormResponseQuery {
	query := (&FormResponseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(form_response.Table, form_response.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FormResponsesTable, user.FormResponsesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivationTokens queries the activation_tokens edge of a User.
func (c *UserClient) QueryActivationTokens(u *User) *ActivationTokenQuery {
	query := (&ActivationTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(activation_token.Table, activation_token.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ActivationTokensTable, user.ActivationTokensColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Activation_token, Category_Questions, Example, Form_Response, History_Answer,
		Questions, Session, User []ent.Hook
	}
	inters struct {
		Activation_token, Category_Questions, Example, Form_Response, History_Answer,
		Questions, Session, User []ent.Interceptor
	}
)
