// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/predicate"
	"go-gin/database/ent/questions"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HistoryAnswerQuery is the builder for querying History_Answer entities.
type HistoryAnswerQuery struct {
	config
	ctx              *QueryContext
	order            []history_answer.OrderOption
	inters           []Interceptor
	predicates       []predicate.History_Answer
	withFormResponse *FormResponseQuery
	withQuestion     *QuestionsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HistoryAnswerQuery builder.
func (haq *HistoryAnswerQuery) Where(ps ...predicate.History_Answer) *HistoryAnswerQuery {
	haq.predicates = append(haq.predicates, ps...)
	return haq
}

// Limit the number of records to be returned by this query.
func (haq *HistoryAnswerQuery) Limit(limit int) *HistoryAnswerQuery {
	haq.ctx.Limit = &limit
	return haq
}

// Offset to start from.
func (haq *HistoryAnswerQuery) Offset(offset int) *HistoryAnswerQuery {
	haq.ctx.Offset = &offset
	return haq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (haq *HistoryAnswerQuery) Unique(unique bool) *HistoryAnswerQuery {
	haq.ctx.Unique = &unique
	return haq
}

// Order specifies how the records should be ordered.
func (haq *HistoryAnswerQuery) Order(o ...history_answer.OrderOption) *HistoryAnswerQuery {
	haq.order = append(haq.order, o...)
	return haq
}

// QueryFormResponse chains the current query on the "form_response" edge.
func (haq *HistoryAnswerQuery) QueryFormResponse() *FormResponseQuery {
	query := (&FormResponseClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(history_answer.Table, history_answer.FieldID, selector),
			sqlgraph.To(form_response.Table, form_response.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, history_answer.FormResponseTable, history_answer.FormResponseColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestion chains the current query on the "question" edge.
func (haq *HistoryAnswerQuery) QueryQuestion() *QuestionsQuery {
	query := (&QuestionsClient{config: haq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := haq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := haq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(history_answer.Table, history_answer.FieldID, selector),
			sqlgraph.To(questions.Table, questions.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, history_answer.QuestionTable, history_answer.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(haq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first History_Answer entity from the query.
// Returns a *NotFoundError when no History_Answer was found.
func (haq *HistoryAnswerQuery) First(ctx context.Context) (*History_Answer, error) {
	nodes, err := haq.Limit(1).All(setContextOp(ctx, haq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{history_answer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (haq *HistoryAnswerQuery) FirstX(ctx context.Context) *History_Answer {
	node, err := haq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first History_Answer ID from the query.
// Returns a *NotFoundError when no History_Answer ID was found.
func (haq *HistoryAnswerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = haq.Limit(1).IDs(setContextOp(ctx, haq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{history_answer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (haq *HistoryAnswerQuery) FirstIDX(ctx context.Context) int {
	id, err := haq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single History_Answer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one History_Answer entity is found.
// Returns a *NotFoundError when no History_Answer entities are found.
func (haq *HistoryAnswerQuery) Only(ctx context.Context) (*History_Answer, error) {
	nodes, err := haq.Limit(2).All(setContextOp(ctx, haq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{history_answer.Label}
	default:
		return nil, &NotSingularError{history_answer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (haq *HistoryAnswerQuery) OnlyX(ctx context.Context) *History_Answer {
	node, err := haq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only History_Answer ID in the query.
// Returns a *NotSingularError when more than one History_Answer ID is found.
// Returns a *NotFoundError when no entities are found.
func (haq *HistoryAnswerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = haq.Limit(2).IDs(setContextOp(ctx, haq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{history_answer.Label}
	default:
		err = &NotSingularError{history_answer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (haq *HistoryAnswerQuery) OnlyIDX(ctx context.Context) int {
	id, err := haq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of History_Answers.
func (haq *HistoryAnswerQuery) All(ctx context.Context) ([]*History_Answer, error) {
	ctx = setContextOp(ctx, haq.ctx, ent.OpQueryAll)
	if err := haq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*History_Answer, *HistoryAnswerQuery]()
	return withInterceptors[[]*History_Answer](ctx, haq, qr, haq.inters)
}

// AllX is like All, but panics if an error occurs.
func (haq *HistoryAnswerQuery) AllX(ctx context.Context) []*History_Answer {
	nodes, err := haq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of History_Answer IDs.
func (haq *HistoryAnswerQuery) IDs(ctx context.Context) (ids []int, err error) {
	if haq.ctx.Unique == nil && haq.path != nil {
		haq.Unique(true)
	}
	ctx = setContextOp(ctx, haq.ctx, ent.OpQueryIDs)
	if err = haq.Select(history_answer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (haq *HistoryAnswerQuery) IDsX(ctx context.Context) []int {
	ids, err := haq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (haq *HistoryAnswerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, haq.ctx, ent.OpQueryCount)
	if err := haq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, haq, querierCount[*HistoryAnswerQuery](), haq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (haq *HistoryAnswerQuery) CountX(ctx context.Context) int {
	count, err := haq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (haq *HistoryAnswerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, haq.ctx, ent.OpQueryExist)
	switch _, err := haq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (haq *HistoryAnswerQuery) ExistX(ctx context.Context) bool {
	exist, err := haq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HistoryAnswerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (haq *HistoryAnswerQuery) Clone() *HistoryAnswerQuery {
	if haq == nil {
		return nil
	}
	return &HistoryAnswerQuery{
		config:           haq.config,
		ctx:              haq.ctx.Clone(),
		order:            append([]history_answer.OrderOption{}, haq.order...),
		inters:           append([]Interceptor{}, haq.inters...),
		predicates:       append([]predicate.History_Answer{}, haq.predicates...),
		withFormResponse: haq.withFormResponse.Clone(),
		withQuestion:     haq.withQuestion.Clone(),
		// clone intermediate query.
		sql:  haq.sql.Clone(),
		path: haq.path,
	}
}

// WithFormResponse tells the query-builder to eager-load the nodes that are connected to
// the "form_response" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HistoryAnswerQuery) WithFormResponse(opts ...func(*FormResponseQuery)) *HistoryAnswerQuery {
	query := (&FormResponseClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withFormResponse = query
	return haq
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (haq *HistoryAnswerQuery) WithQuestion(opts ...func(*QuestionsQuery)) *HistoryAnswerQuery {
	query := (&QuestionsClient{config: haq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	haq.withQuestion = query
	return haq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HistoryAnswer.Query().
//		GroupBy(history_answer.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (haq *HistoryAnswerQuery) GroupBy(field string, fields ...string) *HistoryAnswerGroupBy {
	haq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HistoryAnswerGroupBy{build: haq}
	grbuild.flds = &haq.ctx.Fields
	grbuild.label = history_answer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.HistoryAnswer.Query().
//		Select(history_answer.FieldCreatedAt).
//		Scan(ctx, &v)
func (haq *HistoryAnswerQuery) Select(fields ...string) *HistoryAnswerSelect {
	haq.ctx.Fields = append(haq.ctx.Fields, fields...)
	sbuild := &HistoryAnswerSelect{HistoryAnswerQuery: haq}
	sbuild.label = history_answer.Label
	sbuild.flds, sbuild.scan = &haq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HistoryAnswerSelect configured with the given aggregations.
func (haq *HistoryAnswerQuery) Aggregate(fns ...AggregateFunc) *HistoryAnswerSelect {
	return haq.Select().Aggregate(fns...)
}

func (haq *HistoryAnswerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range haq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, haq); err != nil {
				return err
			}
		}
	}
	for _, f := range haq.ctx.Fields {
		if !history_answer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if haq.path != nil {
		prev, err := haq.path(ctx)
		if err != nil {
			return err
		}
		haq.sql = prev
	}
	return nil
}

func (haq *HistoryAnswerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*History_Answer, error) {
	var (
		nodes       = []*History_Answer{}
		_spec       = haq.querySpec()
		loadedTypes = [2]bool{
			haq.withFormResponse != nil,
			haq.withQuestion != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*History_Answer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &History_Answer{config: haq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, haq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := haq.withFormResponse; query != nil {
		if err := haq.loadFormResponse(ctx, query, nodes, nil,
			func(n *History_Answer, e *Form_Response) { n.Edges.FormResponse = e }); err != nil {
			return nil, err
		}
	}
	if query := haq.withQuestion; query != nil {
		if err := haq.loadQuestion(ctx, query, nodes, nil,
			func(n *History_Answer, e *Questions) { n.Edges.Question = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (haq *HistoryAnswerQuery) loadFormResponse(ctx context.Context, query *FormResponseQuery, nodes []*History_Answer, init func(*History_Answer), assign func(*History_Answer, *Form_Response)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*History_Answer)
	for i := range nodes {
		fk := nodes[i].FormResponseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(form_response.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "form_response_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (haq *HistoryAnswerQuery) loadQuestion(ctx context.Context, query *QuestionsQuery, nodes []*History_Answer, init func(*History_Answer), assign func(*History_Answer, *Questions)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*History_Answer)
	for i := range nodes {
		fk := nodes[i].QuestionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(questions.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (haq *HistoryAnswerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := haq.querySpec()
	_spec.Node.Columns = haq.ctx.Fields
	if len(haq.ctx.Fields) > 0 {
		_spec.Unique = haq.ctx.Unique != nil && *haq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, haq.driver, _spec)
}

func (haq *HistoryAnswerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(history_answer.Table, history_answer.Columns, sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt))
	_spec.From = haq.sql
	if unique := haq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if haq.path != nil {
		_spec.Unique = true
	}
	if fields := haq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, history_answer.FieldID)
		for i := range fields {
			if fields[i] != history_answer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if haq.withFormResponse != nil {
			_spec.Node.AddColumnOnce(history_answer.FieldFormResponseID)
		}
		if haq.withQuestion != nil {
			_spec.Node.AddColumnOnce(history_answer.FieldQuestionID)
		}
	}
	if ps := haq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := haq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := haq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := haq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (haq *HistoryAnswerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(haq.driver.Dialect())
	t1 := builder.Table(history_answer.Table)
	columns := haq.ctx.Fields
	if len(columns) == 0 {
		columns = history_answer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if haq.sql != nil {
		selector = haq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if haq.ctx.Unique != nil && *haq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range haq.predicates {
		p(selector)
	}
	for _, p := range haq.order {
		p(selector)
	}
	if offset := haq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := haq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HistoryAnswerGroupBy is the group-by builder for History_Answer entities.
type HistoryAnswerGroupBy struct {
	selector
	build *HistoryAnswerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hagb *HistoryAnswerGroupBy) Aggregate(fns ...AggregateFunc) *HistoryAnswerGroupBy {
	hagb.fns = append(hagb.fns, fns...)
	return hagb
}

// Scan applies the selector query and scans the result into the given value.
func (hagb *HistoryAnswerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hagb.build.ctx, ent.OpQueryGroupBy)
	if err := hagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HistoryAnswerQuery, *HistoryAnswerGroupBy](ctx, hagb.build, hagb, hagb.build.inters, v)
}

func (hagb *HistoryAnswerGroupBy) sqlScan(ctx context.Context, root *HistoryAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hagb.fns))
	for _, fn := range hagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hagb.flds)+len(hagb.fns))
		for _, f := range *hagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HistoryAnswerSelect is the builder for selecting fields of HistoryAnswer entities.
type HistoryAnswerSelect struct {
	*HistoryAnswerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (has *HistoryAnswerSelect) Aggregate(fns ...AggregateFunc) *HistoryAnswerSelect {
	has.fns = append(has.fns, fns...)
	return has
}

// Scan applies the selector query and scans the result into the given value.
func (has *HistoryAnswerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, has.ctx, ent.OpQuerySelect)
	if err := has.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HistoryAnswerQuery, *HistoryAnswerSelect](ctx, has.HistoryAnswerQuery, has, has.inters, v)
}

func (has *HistoryAnswerSelect) sqlScan(ctx context.Context, root *HistoryAnswerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(has.fns))
	for _, fn := range has.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*has.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := has.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
