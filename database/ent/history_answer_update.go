// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/predicate"
	"go-gin/database/ent/question"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HistoryAnswerUpdate is the builder for updating History_Answer entities.
type HistoryAnswerUpdate struct {
	config
	hooks    []Hook
	mutation *HistoryAnswerMutation
}

// Where appends a list predicates to the HistoryAnswerUpdate builder.
func (hau *HistoryAnswerUpdate) Where(ps ...predicate.History_Answer) *HistoryAnswerUpdate {
	hau.mutation.Where(ps...)
	return hau
}

// SetUpdatedAt sets the "updated_at" field.
func (hau *HistoryAnswerUpdate) SetUpdatedAt(t time.Time) *HistoryAnswerUpdate {
	hau.mutation.SetUpdatedAt(t)
	return hau
}

// SetDeletedAt sets the "deleted_at" field.
func (hau *HistoryAnswerUpdate) SetDeletedAt(t time.Time) *HistoryAnswerUpdate {
	hau.mutation.SetDeletedAt(t)
	return hau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hau *HistoryAnswerUpdate) SetNillableDeletedAt(t *time.Time) *HistoryAnswerUpdate {
	if t != nil {
		hau.SetDeletedAt(*t)
	}
	return hau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (hau *HistoryAnswerUpdate) ClearDeletedAt() *HistoryAnswerUpdate {
	hau.mutation.ClearDeletedAt()
	return hau
}

// SetFormResponseID sets the "form_response_id" field.
func (hau *HistoryAnswerUpdate) SetFormResponseID(i int) *HistoryAnswerUpdate {
	hau.mutation.SetFormResponseID(i)
	return hau
}

// SetNillableFormResponseID sets the "form_response_id" field if the given value is not nil.
func (hau *HistoryAnswerUpdate) SetNillableFormResponseID(i *int) *HistoryAnswerUpdate {
	if i != nil {
		hau.SetFormResponseID(*i)
	}
	return hau
}

// SetQuestionID sets the "question_id" field.
func (hau *HistoryAnswerUpdate) SetQuestionID(i int) *HistoryAnswerUpdate {
	hau.mutation.SetQuestionID(i)
	return hau
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (hau *HistoryAnswerUpdate) SetNillableQuestionID(i *int) *HistoryAnswerUpdate {
	if i != nil {
		hau.SetQuestionID(*i)
	}
	return hau
}

// SetAnswer sets the "answer" field.
func (hau *HistoryAnswerUpdate) SetAnswer(i int) *HistoryAnswerUpdate {
	hau.mutation.ResetAnswer()
	hau.mutation.SetAnswer(i)
	return hau
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (hau *HistoryAnswerUpdate) SetNillableAnswer(i *int) *HistoryAnswerUpdate {
	if i != nil {
		hau.SetAnswer(*i)
	}
	return hau
}

// AddAnswer adds i to the "answer" field.
func (hau *HistoryAnswerUpdate) AddAnswer(i int) *HistoryAnswerUpdate {
	hau.mutation.AddAnswer(i)
	return hau
}

// SetFormResponse sets the "form_response" edge to the Form_Response entity.
func (hau *HistoryAnswerUpdate) SetFormResponse(f *Form_Response) *HistoryAnswerUpdate {
	return hau.SetFormResponseID(f.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (hau *HistoryAnswerUpdate) SetQuestion(q *Question) *HistoryAnswerUpdate {
	return hau.SetQuestionID(q.ID)
}

// Mutation returns the HistoryAnswerMutation object of the builder.
func (hau *HistoryAnswerUpdate) Mutation() *HistoryAnswerMutation {
	return hau.mutation
}

// ClearFormResponse clears the "form_response" edge to the Form_Response entity.
func (hau *HistoryAnswerUpdate) ClearFormResponse() *HistoryAnswerUpdate {
	hau.mutation.ClearFormResponse()
	return hau
}

// ClearQuestion clears the "question" edge to the Question entity.
func (hau *HistoryAnswerUpdate) ClearQuestion() *HistoryAnswerUpdate {
	hau.mutation.ClearQuestion()
	return hau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hau *HistoryAnswerUpdate) Save(ctx context.Context) (int, error) {
	hau.defaults()
	return withHooks(ctx, hau.sqlSave, hau.mutation, hau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hau *HistoryAnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := hau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hau *HistoryAnswerUpdate) Exec(ctx context.Context) error {
	_, err := hau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hau *HistoryAnswerUpdate) ExecX(ctx context.Context) {
	if err := hau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hau *HistoryAnswerUpdate) defaults() {
	if _, ok := hau.mutation.UpdatedAt(); !ok {
		v := history_answer.UpdateDefaultUpdatedAt()
		hau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hau *HistoryAnswerUpdate) check() error {
	if v, ok := hau.mutation.FormResponseID(); ok {
		if err := history_answer.FormResponseIDValidator(v); err != nil {
			return &ValidationError{Name: "form_response_id", err: fmt.Errorf(`ent: validator failed for field "History_Answer.form_response_id": %w`, err)}
		}
	}
	if v, ok := hau.mutation.QuestionID(); ok {
		if err := history_answer.QuestionIDValidator(v); err != nil {
			return &ValidationError{Name: "question_id", err: fmt.Errorf(`ent: validator failed for field "History_Answer.question_id": %w`, err)}
		}
	}
	if v, ok := hau.mutation.Answer(); ok {
		if err := history_answer.AnswerValidator(v); err != nil {
			return &ValidationError{Name: "answer", err: fmt.Errorf(`ent: validator failed for field "History_Answer.answer": %w`, err)}
		}
	}
	if hau.mutation.FormResponseCleared() && len(hau.mutation.FormResponseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "History_Answer.form_response"`)
	}
	if hau.mutation.QuestionCleared() && len(hau.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "History_Answer.question"`)
	}
	return nil
}

func (hau *HistoryAnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(history_answer.Table, history_answer.Columns, sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt))
	if ps := hau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hau.mutation.UpdatedAt(); ok {
		_spec.SetField(history_answer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hau.mutation.DeletedAt(); ok {
		_spec.SetField(history_answer.FieldDeletedAt, field.TypeTime, value)
	}
	if hau.mutation.DeletedAtCleared() {
		_spec.ClearField(history_answer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := hau.mutation.Answer(); ok {
		_spec.SetField(history_answer.FieldAnswer, field.TypeInt, value)
	}
	if value, ok := hau.mutation.AddedAnswer(); ok {
		_spec.AddField(history_answer.FieldAnswer, field.TypeInt, value)
	}
	if hau.mutation.FormResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.FormResponseTable,
			Columns: []string{history_answer.FormResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form_response.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.FormResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.FormResponseTable,
			Columns: []string{history_answer.FormResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form_response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hau.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.QuestionTable,
			Columns: []string{history_answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.QuestionTable,
			Columns: []string{history_answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history_answer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hau.mutation.done = true
	return n, nil
}

// HistoryAnswerUpdateOne is the builder for updating a single History_Answer entity.
type HistoryAnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HistoryAnswerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hauo *HistoryAnswerUpdateOne) SetUpdatedAt(t time.Time) *HistoryAnswerUpdateOne {
	hauo.mutation.SetUpdatedAt(t)
	return hauo
}

// SetDeletedAt sets the "deleted_at" field.
func (hauo *HistoryAnswerUpdateOne) SetDeletedAt(t time.Time) *HistoryAnswerUpdateOne {
	hauo.mutation.SetDeletedAt(t)
	return hauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hauo *HistoryAnswerUpdateOne) SetNillableDeletedAt(t *time.Time) *HistoryAnswerUpdateOne {
	if t != nil {
		hauo.SetDeletedAt(*t)
	}
	return hauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (hauo *HistoryAnswerUpdateOne) ClearDeletedAt() *HistoryAnswerUpdateOne {
	hauo.mutation.ClearDeletedAt()
	return hauo
}

// SetFormResponseID sets the "form_response_id" field.
func (hauo *HistoryAnswerUpdateOne) SetFormResponseID(i int) *HistoryAnswerUpdateOne {
	hauo.mutation.SetFormResponseID(i)
	return hauo
}

// SetNillableFormResponseID sets the "form_response_id" field if the given value is not nil.
func (hauo *HistoryAnswerUpdateOne) SetNillableFormResponseID(i *int) *HistoryAnswerUpdateOne {
	if i != nil {
		hauo.SetFormResponseID(*i)
	}
	return hauo
}

// SetQuestionID sets the "question_id" field.
func (hauo *HistoryAnswerUpdateOne) SetQuestionID(i int) *HistoryAnswerUpdateOne {
	hauo.mutation.SetQuestionID(i)
	return hauo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (hauo *HistoryAnswerUpdateOne) SetNillableQuestionID(i *int) *HistoryAnswerUpdateOne {
	if i != nil {
		hauo.SetQuestionID(*i)
	}
	return hauo
}

// SetAnswer sets the "answer" field.
func (hauo *HistoryAnswerUpdateOne) SetAnswer(i int) *HistoryAnswerUpdateOne {
	hauo.mutation.ResetAnswer()
	hauo.mutation.SetAnswer(i)
	return hauo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (hauo *HistoryAnswerUpdateOne) SetNillableAnswer(i *int) *HistoryAnswerUpdateOne {
	if i != nil {
		hauo.SetAnswer(*i)
	}
	return hauo
}

// AddAnswer adds i to the "answer" field.
func (hauo *HistoryAnswerUpdateOne) AddAnswer(i int) *HistoryAnswerUpdateOne {
	hauo.mutation.AddAnswer(i)
	return hauo
}

// SetFormResponse sets the "form_response" edge to the Form_Response entity.
func (hauo *HistoryAnswerUpdateOne) SetFormResponse(f *Form_Response) *HistoryAnswerUpdateOne {
	return hauo.SetFormResponseID(f.ID)
}

// SetQuestion sets the "question" edge to the Question entity.
func (hauo *HistoryAnswerUpdateOne) SetQuestion(q *Question) *HistoryAnswerUpdateOne {
	return hauo.SetQuestionID(q.ID)
}

// Mutation returns the HistoryAnswerMutation object of the builder.
func (hauo *HistoryAnswerUpdateOne) Mutation() *HistoryAnswerMutation {
	return hauo.mutation
}

// ClearFormResponse clears the "form_response" edge to the Form_Response entity.
func (hauo *HistoryAnswerUpdateOne) ClearFormResponse() *HistoryAnswerUpdateOne {
	hauo.mutation.ClearFormResponse()
	return hauo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (hauo *HistoryAnswerUpdateOne) ClearQuestion() *HistoryAnswerUpdateOne {
	hauo.mutation.ClearQuestion()
	return hauo
}

// Where appends a list predicates to the HistoryAnswerUpdate builder.
func (hauo *HistoryAnswerUpdateOne) Where(ps ...predicate.History_Answer) *HistoryAnswerUpdateOne {
	hauo.mutation.Where(ps...)
	return hauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hauo *HistoryAnswerUpdateOne) Select(field string, fields ...string) *HistoryAnswerUpdateOne {
	hauo.fields = append([]string{field}, fields...)
	return hauo
}

// Save executes the query and returns the updated History_Answer entity.
func (hauo *HistoryAnswerUpdateOne) Save(ctx context.Context) (*History_Answer, error) {
	hauo.defaults()
	return withHooks(ctx, hauo.sqlSave, hauo.mutation, hauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hauo *HistoryAnswerUpdateOne) SaveX(ctx context.Context) *History_Answer {
	node, err := hauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hauo *HistoryAnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := hauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hauo *HistoryAnswerUpdateOne) ExecX(ctx context.Context) {
	if err := hauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hauo *HistoryAnswerUpdateOne) defaults() {
	if _, ok := hauo.mutation.UpdatedAt(); !ok {
		v := history_answer.UpdateDefaultUpdatedAt()
		hauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hauo *HistoryAnswerUpdateOne) check() error {
	if v, ok := hauo.mutation.FormResponseID(); ok {
		if err := history_answer.FormResponseIDValidator(v); err != nil {
			return &ValidationError{Name: "form_response_id", err: fmt.Errorf(`ent: validator failed for field "History_Answer.form_response_id": %w`, err)}
		}
	}
	if v, ok := hauo.mutation.QuestionID(); ok {
		if err := history_answer.QuestionIDValidator(v); err != nil {
			return &ValidationError{Name: "question_id", err: fmt.Errorf(`ent: validator failed for field "History_Answer.question_id": %w`, err)}
		}
	}
	if v, ok := hauo.mutation.Answer(); ok {
		if err := history_answer.AnswerValidator(v); err != nil {
			return &ValidationError{Name: "answer", err: fmt.Errorf(`ent: validator failed for field "History_Answer.answer": %w`, err)}
		}
	}
	if hauo.mutation.FormResponseCleared() && len(hauo.mutation.FormResponseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "History_Answer.form_response"`)
	}
	if hauo.mutation.QuestionCleared() && len(hauo.mutation.QuestionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "History_Answer.question"`)
	}
	return nil
}

func (hauo *HistoryAnswerUpdateOne) sqlSave(ctx context.Context) (_node *History_Answer, err error) {
	if err := hauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(history_answer.Table, history_answer.Columns, sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt))
	id, ok := hauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "History_Answer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, history_answer.FieldID)
		for _, f := range fields {
			if !history_answer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != history_answer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hauo.mutation.UpdatedAt(); ok {
		_spec.SetField(history_answer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hauo.mutation.DeletedAt(); ok {
		_spec.SetField(history_answer.FieldDeletedAt, field.TypeTime, value)
	}
	if hauo.mutation.DeletedAtCleared() {
		_spec.ClearField(history_answer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := hauo.mutation.Answer(); ok {
		_spec.SetField(history_answer.FieldAnswer, field.TypeInt, value)
	}
	if value, ok := hauo.mutation.AddedAnswer(); ok {
		_spec.AddField(history_answer.FieldAnswer, field.TypeInt, value)
	}
	if hauo.mutation.FormResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.FormResponseTable,
			Columns: []string{history_answer.FormResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form_response.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.FormResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.FormResponseTable,
			Columns: []string{history_answer.FormResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(form_response.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hauo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.QuestionTable,
			Columns: []string{history_answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history_answer.QuestionTable,
			Columns: []string{history_answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &History_Answer{config: hauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history_answer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hauo.mutation.done = true
	return _node, nil
}
