// Code generated by ent, DO NOT EDIT.

package ent

import (
	"go-gin/database/ent/example"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/questions"
	"go-gin/database/ent/schema"
	"go-gin/database/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	exampleMixin := schema.Example{}.Mixin()
	exampleMixinFields0 := exampleMixin[0].Fields()
	_ = exampleMixinFields0
	exampleFields := schema.Example{}.Fields()
	_ = exampleFields
	// exampleDescCreatedAt is the schema descriptor for created_at field.
	exampleDescCreatedAt := exampleMixinFields0[0].Descriptor()
	// example.DefaultCreatedAt holds the default value on creation for the created_at field.
	example.DefaultCreatedAt = exampleDescCreatedAt.Default.(func() time.Time)
	// exampleDescUpdatedAt is the schema descriptor for updated_at field.
	exampleDescUpdatedAt := exampleMixinFields0[1].Descriptor()
	// example.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	example.DefaultUpdatedAt = exampleDescUpdatedAt.Default.(func() time.Time)
	// example.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	example.UpdateDefaultUpdatedAt = exampleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// exampleDescName is the schema descriptor for name field.
	exampleDescName := exampleFields[1].Descriptor()
	// example.NameValidator is a validator for the "name" field. It is called by the builders before save.
	example.NameValidator = exampleDescName.Validators[0].(func(string) error)
	// exampleDescUsername is the schema descriptor for username field.
	exampleDescUsername := exampleFields[2].Descriptor()
	// example.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	example.UsernameValidator = func() func(string) error {
		validators := exampleDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// exampleDescEmail is the schema descriptor for email field.
	exampleDescEmail := exampleFields[3].Descriptor()
	// example.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	example.EmailValidator = exampleDescEmail.Validators[0].(func(string) error)
	// exampleDescID is the schema descriptor for id field.
	exampleDescID := exampleFields[0].Descriptor()
	// example.DefaultID holds the default value on creation for the id field.
	example.DefaultID = exampleDescID.Default.(func() uuid.UUID)
	form_responseMixin := schema.Form_Response{}.Mixin()
	form_responseMixinFields0 := form_responseMixin[0].Fields()
	_ = form_responseMixinFields0
	form_responseFields := schema.Form_Response{}.Fields()
	_ = form_responseFields
	// form_responseDescCreatedAt is the schema descriptor for created_at field.
	form_responseDescCreatedAt := form_responseMixinFields0[0].Descriptor()
	// form_response.DefaultCreatedAt holds the default value on creation for the created_at field.
	form_response.DefaultCreatedAt = form_responseDescCreatedAt.Default.(func() time.Time)
	// form_responseDescUpdatedAt is the schema descriptor for updated_at field.
	form_responseDescUpdatedAt := form_responseMixinFields0[1].Descriptor()
	// form_response.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	form_response.DefaultUpdatedAt = form_responseDescUpdatedAt.Default.(func() time.Time)
	// form_response.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	form_response.UpdateDefaultUpdatedAt = form_responseDescUpdatedAt.UpdateDefault.(func() time.Time)
	// form_responseDescTotalScore is the schema descriptor for total_score field.
	form_responseDescTotalScore := form_responseFields[1].Descriptor()
	// form_response.DefaultTotalScore holds the default value on creation for the total_score field.
	form_response.DefaultTotalScore = form_responseDescTotalScore.Default.(uint8)
	// form_response.TotalScoreValidator is a validator for the "total_score" field. It is called by the builders before save.
	form_response.TotalScoreValidator = form_responseDescTotalScore.Validators[0].(func(uint8) error)
	// form_responseDescDepressionLevel is the schema descriptor for depression_level field.
	form_responseDescDepressionLevel := form_responseFields[2].Descriptor()
	// form_response.DepressionLevelValidator is a validator for the "depression_level" field. It is called by the builders before save.
	form_response.DepressionLevelValidator = func() func(string) error {
		validators := form_responseDescDepressionLevel.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(depression_level string) error {
			for _, fn := range fns {
				if err := fn(depression_level); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	history_answerMixin := schema.History_Answer{}.Mixin()
	history_answerMixinFields0 := history_answerMixin[0].Fields()
	_ = history_answerMixinFields0
	history_answerFields := schema.History_Answer{}.Fields()
	_ = history_answerFields
	// history_answerDescCreatedAt is the schema descriptor for created_at field.
	history_answerDescCreatedAt := history_answerMixinFields0[0].Descriptor()
	// history_answer.DefaultCreatedAt holds the default value on creation for the created_at field.
	history_answer.DefaultCreatedAt = history_answerDescCreatedAt.Default.(func() time.Time)
	// history_answerDescUpdatedAt is the schema descriptor for updated_at field.
	history_answerDescUpdatedAt := history_answerMixinFields0[1].Descriptor()
	// history_answer.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	history_answer.DefaultUpdatedAt = history_answerDescUpdatedAt.Default.(func() time.Time)
	// history_answer.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	history_answer.UpdateDefaultUpdatedAt = history_answerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// history_answerDescFormResponseID is the schema descriptor for form_response_id field.
	history_answerDescFormResponseID := history_answerFields[0].Descriptor()
	// history_answer.FormResponseIDValidator is a validator for the "form_response_id" field. It is called by the builders before save.
	history_answer.FormResponseIDValidator = history_answerDescFormResponseID.Validators[0].(func(int) error)
	// history_answerDescQuestionID is the schema descriptor for question_id field.
	history_answerDescQuestionID := history_answerFields[1].Descriptor()
	// history_answer.QuestionIDValidator is a validator for the "question_id" field. It is called by the builders before save.
	history_answer.QuestionIDValidator = history_answerDescQuestionID.Validators[0].(func(int) error)
	// history_answerDescAnswer is the schema descriptor for answer field.
	history_answerDescAnswer := history_answerFields[2].Descriptor()
	// history_answer.AnswerValidator is a validator for the "answer" field. It is called by the builders before save.
	history_answer.AnswerValidator = history_answerDescAnswer.Validators[0].(func(int) error)
	questionsMixin := schema.Questions{}.Mixin()
	questionsMixinFields0 := questionsMixin[0].Fields()
	_ = questionsMixinFields0
	questionsFields := schema.Questions{}.Fields()
	_ = questionsFields
	// questionsDescCreatedAt is the schema descriptor for created_at field.
	questionsDescCreatedAt := questionsMixinFields0[0].Descriptor()
	// questions.DefaultCreatedAt holds the default value on creation for the created_at field.
	questions.DefaultCreatedAt = questionsDescCreatedAt.Default.(func() time.Time)
	// questionsDescUpdatedAt is the schema descriptor for updated_at field.
	questionsDescUpdatedAt := questionsMixinFields0[1].Descriptor()
	// questions.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	questions.DefaultUpdatedAt = questionsDescUpdatedAt.Default.(func() time.Time)
	// questions.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	questions.UpdateDefaultUpdatedAt = questionsDescUpdatedAt.UpdateDefault.(func() time.Time)
	// questionsDescText is the schema descriptor for text field.
	questionsDescText := questionsFields[0].Descriptor()
	// questions.TextValidator is a validator for the "text" field. It is called by the builders before save.
	questions.TextValidator = questionsDescText.Validators[0].(func(string) error)
	// questionsDescLanguage is the schema descriptor for language field.
	questionsDescLanguage := questionsFields[1].Descriptor()
	// questions.LanguageValidator is a validator for the "language" field. It is called by the builders before save.
	questions.LanguageValidator = questionsDescLanguage.Validators[0].(func(string) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
