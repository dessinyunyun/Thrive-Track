// Code generated by ent, DO NOT EDIT.

package ent

import (
	"go-gin/database/ent/activation_token"
	"go-gin/database/ent/example"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/question"
	"go-gin/database/ent/question_category"
	"go-gin/database/ent/schema"
	"go-gin/database/ent/token"
	"go-gin/database/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	activation_tokenMixin := schema.Activation_token{}.Mixin()
	activation_tokenMixinFields0 := activation_tokenMixin[0].Fields()
	_ = activation_tokenMixinFields0
	activation_tokenFields := schema.Activation_token{}.Fields()
	_ = activation_tokenFields
	// activation_tokenDescCreatedAt is the schema descriptor for created_at field.
	activation_tokenDescCreatedAt := activation_tokenMixinFields0[0].Descriptor()
	// activation_token.DefaultCreatedAt holds the default value on creation for the created_at field.
	activation_token.DefaultCreatedAt = activation_tokenDescCreatedAt.Default.(func() time.Time)
	// activation_tokenDescUpdatedAt is the schema descriptor for updated_at field.
	activation_tokenDescUpdatedAt := activation_tokenMixinFields0[1].Descriptor()
	// activation_token.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	activation_token.DefaultUpdatedAt = activation_tokenDescUpdatedAt.Default.(func() time.Time)
	// activation_token.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	activation_token.UpdateDefaultUpdatedAt = activation_tokenDescUpdatedAt.UpdateDefault.(func() time.Time)
	// activation_tokenDescToken is the schema descriptor for token field.
	activation_tokenDescToken := activation_tokenFields[2].Descriptor()
	// activation_token.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	activation_token.TokenValidator = func() func(string) error {
		validators := activation_tokenDescToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(token string) error {
			for _, fn := range fns {
				if err := fn(token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// activation_tokenDescIsused is the schema descriptor for isused field.
	activation_tokenDescIsused := activation_tokenFields[3].Descriptor()
	// activation_token.DefaultIsused holds the default value on creation for the isused field.
	activation_token.DefaultIsused = activation_tokenDescIsused.Default.(bool)
	// activation_tokenDescID is the schema descriptor for id field.
	activation_tokenDescID := activation_tokenFields[0].Descriptor()
	// activation_token.DefaultID holds the default value on creation for the id field.
	activation_token.DefaultID = activation_tokenDescID.Default.(func() uuid.UUID)
	exampleMixin := schema.Example{}.Mixin()
	exampleMixinFields0 := exampleMixin[0].Fields()
	_ = exampleMixinFields0
	exampleFields := schema.Example{}.Fields()
	_ = exampleFields
	// exampleDescCreatedAt is the schema descriptor for created_at field.
	exampleDescCreatedAt := exampleMixinFields0[0].Descriptor()
	// example.DefaultCreatedAt holds the default value on creation for the created_at field.
	example.DefaultCreatedAt = exampleDescCreatedAt.Default.(func() time.Time)
	// exampleDescUpdatedAt is the schema descriptor for updated_at field.
	exampleDescUpdatedAt := exampleMixinFields0[1].Descriptor()
	// example.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	example.DefaultUpdatedAt = exampleDescUpdatedAt.Default.(func() time.Time)
	// example.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	example.UpdateDefaultUpdatedAt = exampleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// exampleDescName is the schema descriptor for name field.
	exampleDescName := exampleFields[1].Descriptor()
	// example.NameValidator is a validator for the "name" field. It is called by the builders before save.
	example.NameValidator = exampleDescName.Validators[0].(func(string) error)
	// exampleDescUsername is the schema descriptor for username field.
	exampleDescUsername := exampleFields[2].Descriptor()
	// example.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	example.UsernameValidator = func() func(string) error {
		validators := exampleDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// exampleDescEmail is the schema descriptor for email field.
	exampleDescEmail := exampleFields[3].Descriptor()
	// example.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	example.EmailValidator = exampleDescEmail.Validators[0].(func(string) error)
	// exampleDescID is the schema descriptor for id field.
	exampleDescID := exampleFields[0].Descriptor()
	// example.DefaultID holds the default value on creation for the id field.
	example.DefaultID = exampleDescID.Default.(func() uuid.UUID)
	form_responseMixin := schema.Form_Response{}.Mixin()
	form_responseMixinFields0 := form_responseMixin[0].Fields()
	_ = form_responseMixinFields0
	form_responseFields := schema.Form_Response{}.Fields()
	_ = form_responseFields
	// form_responseDescCreatedAt is the schema descriptor for created_at field.
	form_responseDescCreatedAt := form_responseMixinFields0[0].Descriptor()
	// form_response.DefaultCreatedAt holds the default value on creation for the created_at field.
	form_response.DefaultCreatedAt = form_responseDescCreatedAt.Default.(func() time.Time)
	// form_responseDescUpdatedAt is the schema descriptor for updated_at field.
	form_responseDescUpdatedAt := form_responseMixinFields0[1].Descriptor()
	// form_response.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	form_response.DefaultUpdatedAt = form_responseDescUpdatedAt.Default.(func() time.Time)
	// form_response.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	form_response.UpdateDefaultUpdatedAt = form_responseDescUpdatedAt.UpdateDefault.(func() time.Time)
	// form_responseDescTotalScore is the schema descriptor for total_score field.
	form_responseDescTotalScore := form_responseFields[1].Descriptor()
	// form_response.DefaultTotalScore holds the default value on creation for the total_score field.
	form_response.DefaultTotalScore = form_responseDescTotalScore.Default.(uint8)
	// form_response.TotalScoreValidator is a validator for the "total_score" field. It is called by the builders before save.
	form_response.TotalScoreValidator = form_responseDescTotalScore.Validators[0].(func(uint8) error)
	// form_responseDescDepressionLevel is the schema descriptor for depression_level field.
	form_responseDescDepressionLevel := form_responseFields[2].Descriptor()
	// form_response.DepressionLevelValidator is a validator for the "depression_level" field. It is called by the builders before save.
	form_response.DepressionLevelValidator = func() func(string) error {
		validators := form_responseDescDepressionLevel.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(depression_level string) error {
			for _, fn := range fns {
				if err := fn(depression_level); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	history_answerMixin := schema.History_Answer{}.Mixin()
	history_answerMixinFields0 := history_answerMixin[0].Fields()
	_ = history_answerMixinFields0
	history_answerFields := schema.History_Answer{}.Fields()
	_ = history_answerFields
	// history_answerDescCreatedAt is the schema descriptor for created_at field.
	history_answerDescCreatedAt := history_answerMixinFields0[0].Descriptor()
	// history_answer.DefaultCreatedAt holds the default value on creation for the created_at field.
	history_answer.DefaultCreatedAt = history_answerDescCreatedAt.Default.(func() time.Time)
	// history_answerDescUpdatedAt is the schema descriptor for updated_at field.
	history_answerDescUpdatedAt := history_answerMixinFields0[1].Descriptor()
	// history_answer.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	history_answer.DefaultUpdatedAt = history_answerDescUpdatedAt.Default.(func() time.Time)
	// history_answer.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	history_answer.UpdateDefaultUpdatedAt = history_answerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// history_answerDescFormResponseID is the schema descriptor for form_response_id field.
	history_answerDescFormResponseID := history_answerFields[0].Descriptor()
	// history_answer.FormResponseIDValidator is a validator for the "form_response_id" field. It is called by the builders before save.
	history_answer.FormResponseIDValidator = history_answerDescFormResponseID.Validators[0].(func(int) error)
	// history_answerDescQuestionID is the schema descriptor for question_id field.
	history_answerDescQuestionID := history_answerFields[1].Descriptor()
	// history_answer.QuestionIDValidator is a validator for the "question_id" field. It is called by the builders before save.
	history_answer.QuestionIDValidator = history_answerDescQuestionID.Validators[0].(func(int) error)
	// history_answerDescAnswer is the schema descriptor for answer field.
	history_answerDescAnswer := history_answerFields[2].Descriptor()
	// history_answer.AnswerValidator is a validator for the "answer" field. It is called by the builders before save.
	history_answer.AnswerValidator = history_answerDescAnswer.Validators[0].(func(int) error)
	questionMixin := schema.Question{}.Mixin()
	questionMixinFields0 := questionMixin[0].Fields()
	_ = questionMixinFields0
	questionFields := schema.Question{}.Fields()
	_ = questionFields
	// questionDescCreatedAt is the schema descriptor for created_at field.
	questionDescCreatedAt := questionMixinFields0[0].Descriptor()
	// question.DefaultCreatedAt holds the default value on creation for the created_at field.
	question.DefaultCreatedAt = questionDescCreatedAt.Default.(func() time.Time)
	// questionDescUpdatedAt is the schema descriptor for updated_at field.
	questionDescUpdatedAt := questionMixinFields0[1].Descriptor()
	// question.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	question.DefaultUpdatedAt = questionDescUpdatedAt.Default.(func() time.Time)
	// question.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	question.UpdateDefaultUpdatedAt = questionDescUpdatedAt.UpdateDefault.(func() time.Time)
	// questionDescText is the schema descriptor for text field.
	questionDescText := questionFields[0].Descriptor()
	// question.TextValidator is a validator for the "text" field. It is called by the builders before save.
	question.TextValidator = questionDescText.Validators[0].(func(string) error)
	// questionDescLanguage is the schema descriptor for language field.
	questionDescLanguage := questionFields[1].Descriptor()
	// question.LanguageValidator is a validator for the "language" field. It is called by the builders before save.
	question.LanguageValidator = questionDescLanguage.Validators[0].(func(string) error)
	question_categoryFields := schema.Question_Category{}.Fields()
	_ = question_categoryFields
	// question_categoryDescName is the schema descriptor for name field.
	question_categoryDescName := question_categoryFields[0].Descriptor()
	// question_category.NameValidator is a validator for the "name" field. It is called by the builders before save.
	question_category.NameValidator = question_categoryDescName.Validators[0].(func(string) error)
	// question_categoryDescLanguage is the schema descriptor for language field.
	question_categoryDescLanguage := question_categoryFields[2].Descriptor()
	// question_category.LanguageValidator is a validator for the "language" field. It is called by the builders before save.
	question_category.LanguageValidator = question_categoryDescLanguage.Validators[0].(func(string) error)
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescAccessToken is the schema descriptor for access_token field.
	tokenDescAccessToken := tokenFields[2].Descriptor()
	// token.AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	token.AccessTokenValidator = func() func(string) error {
		validators := tokenDescAccessToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(access_token string) error {
			for _, fn := range fns {
				if err := fn(access_token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescRefreshToken is the schema descriptor for refresh_token field.
	tokenDescRefreshToken := tokenFields[3].Descriptor()
	// token.RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	token.RefreshTokenValidator = func() func(string) error {
		validators := tokenDescRefreshToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(refresh_token string) error {
			for _, fn := range fns {
				if err := fn(refresh_token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenFields[0].Descriptor()
	// token.DefaultID holds the default value on creation for the id field.
	token.DefaultID = tokenDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescActive is the schema descriptor for active field.
	userDescActive := userFields[5].Descriptor()
	// user.DefaultActive holds the default value on creation for the active field.
	user.DefaultActive = userDescActive.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
