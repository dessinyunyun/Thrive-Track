// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/questions"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionsCreate is the builder for creating a Questions entity.
type QuestionsCreate struct {
	config
	mutation *QuestionsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuestionsCreate) SetCreatedAt(t time.Time) *QuestionsCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuestionsCreate) SetNillableCreatedAt(t *time.Time) *QuestionsCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetUpdatedAt sets the "updated_at" field.
func (qc *QuestionsCreate) SetUpdatedAt(t time.Time) *QuestionsCreate {
	qc.mutation.SetUpdatedAt(t)
	return qc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qc *QuestionsCreate) SetNillableUpdatedAt(t *time.Time) *QuestionsCreate {
	if t != nil {
		qc.SetUpdatedAt(*t)
	}
	return qc
}

// SetDeletedAt sets the "deleted_at" field.
func (qc *QuestionsCreate) SetDeletedAt(t time.Time) *QuestionsCreate {
	qc.mutation.SetDeletedAt(t)
	return qc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qc *QuestionsCreate) SetNillableDeletedAt(t *time.Time) *QuestionsCreate {
	if t != nil {
		qc.SetDeletedAt(*t)
	}
	return qc
}

// SetText sets the "text" field.
func (qc *QuestionsCreate) SetText(s string) *QuestionsCreate {
	qc.mutation.SetText(s)
	return qc
}

// SetLanguage sets the "language" field.
func (qc *QuestionsCreate) SetLanguage(s string) *QuestionsCreate {
	qc.mutation.SetLanguage(s)
	return qc
}

// SetDescription sets the "description" field.
func (qc *QuestionsCreate) SetDescription(s string) *QuestionsCreate {
	qc.mutation.SetDescription(s)
	return qc
}

// SetOrder sets the "order" field.
func (qc *QuestionsCreate) SetOrder(i int) *QuestionsCreate {
	qc.mutation.SetOrder(i)
	return qc
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by IDs.
func (qc *QuestionsCreate) AddHistoryAnswerIDs(ids ...int) *QuestionsCreate {
	qc.mutation.AddHistoryAnswerIDs(ids...)
	return qc
}

// AddHistoryAnswers adds the "history_answers" edges to the History_Answer entity.
func (qc *QuestionsCreate) AddHistoryAnswers(h ...*History_Answer) *QuestionsCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return qc.AddHistoryAnswerIDs(ids...)
}

// Mutation returns the QuestionsMutation object of the builder.
func (qc *QuestionsCreate) Mutation() *QuestionsMutation {
	return qc.mutation
}

// Save creates the Questions in the database.
func (qc *QuestionsCreate) Save(ctx context.Context) (*Questions, error) {
	qc.defaults()
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuestionsCreate) SaveX(ctx context.Context) *Questions {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuestionsCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuestionsCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuestionsCreate) defaults() {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		v := questions.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		v := questions.DefaultUpdatedAt()
		qc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuestionsCreate) check() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Questions.created_at"`)}
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Questions.updated_at"`)}
	}
	if _, ok := qc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Questions.text"`)}
	}
	if v, ok := qc.mutation.Text(); ok {
		if err := questions.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Questions.text": %w`, err)}
		}
	}
	if _, ok := qc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Questions.language"`)}
	}
	if v, ok := qc.mutation.Language(); ok {
		if err := questions.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Questions.language": %w`, err)}
		}
	}
	if _, ok := qc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Questions.description"`)}
	}
	if _, ok := qc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Questions.order"`)}
	}
	return nil
}

func (qc *QuestionsCreate) sqlSave(ctx context.Context) (*Questions, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuestionsCreate) createSpec() (*Questions, *sqlgraph.CreateSpec) {
	var (
		_node = &Questions{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(questions.Table, sqlgraph.NewFieldSpec(questions.FieldID, field.TypeInt))
	)
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(questions.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qc.mutation.UpdatedAt(); ok {
		_spec.SetField(questions.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qc.mutation.DeletedAt(); ok {
		_spec.SetField(questions.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := qc.mutation.Text(); ok {
		_spec.SetField(questions.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := qc.mutation.Language(); ok {
		_spec.SetField(questions.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := qc.mutation.Description(); ok {
		_spec.SetField(questions.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := qc.mutation.Order(); ok {
		_spec.SetField(questions.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := qc.mutation.HistoryAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questions.HistoryAnswersTable,
			Columns: []string{questions.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionsCreateBulk is the builder for creating many Questions entities in bulk.
type QuestionsCreateBulk struct {
	config
	err      error
	builders []*QuestionsCreate
}

// Save creates the Questions entities in the database.
func (qcb *QuestionsCreateBulk) Save(ctx context.Context) ([]*Questions, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Questions, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuestionsCreateBulk) SaveX(ctx context.Context) []*Questions {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuestionsCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuestionsCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}
