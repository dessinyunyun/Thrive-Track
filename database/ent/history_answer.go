// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/questions"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// History_Answer is the model entity for the History_Answer schema.
type History_Answer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// FormResponseID holds the value of the "form_response_id" field.
	FormResponseID int `json:"form_response_id,omitempty"`
	// QuestionID holds the value of the "question_id" field.
	QuestionID int `json:"question_id,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer int `json:"answer,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the History_AnswerQuery when eager-loading is set.
	Edges        History_AnswerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// History_AnswerEdges holds the relations/edges for other nodes in the graph.
type History_AnswerEdges struct {
	// FormResponse holds the value of the form_response edge.
	FormResponse *Form_Response `json:"form_response,omitempty"`
	// Question holds the value of the question edge.
	Question *Questions `json:"question,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FormResponseOrErr returns the FormResponse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e History_AnswerEdges) FormResponseOrErr() (*Form_Response, error) {
	if e.loadedTypes[0] {
		if e.FormResponse == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: form_response.Label}
		}
		return e.FormResponse, nil
	}
	return nil, &NotLoadedError{edge: "form_response"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e History_AnswerEdges) QuestionOrErr() (*Questions, error) {
	if e.loadedTypes[1] {
		if e.Question == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: questions.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*History_Answer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case history_answer.FieldID, history_answer.FieldFormResponseID, history_answer.FieldQuestionID, history_answer.FieldAnswer:
			values[i] = new(sql.NullInt64)
		case history_answer.FieldCreatedAt, history_answer.FieldUpdatedAt, history_answer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the History_Answer fields.
func (ha *History_Answer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case history_answer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ha.ID = int(value.Int64)
		case history_answer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ha.CreatedAt = value.Time
			}
		case history_answer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ha.UpdatedAt = value.Time
			}
		case history_answer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ha.DeletedAt = new(time.Time)
				*ha.DeletedAt = value.Time
			}
		case history_answer.FieldFormResponseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field form_response_id", values[i])
			} else if value.Valid {
				ha.FormResponseID = int(value.Int64)
			}
		case history_answer.FieldQuestionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_id", values[i])
			} else if value.Valid {
				ha.QuestionID = int(value.Int64)
			}
		case history_answer.FieldAnswer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				ha.Answer = int(value.Int64)
			}
		default:
			ha.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the History_Answer.
// This includes values selected through modifiers, order, etc.
func (ha *History_Answer) Value(name string) (ent.Value, error) {
	return ha.selectValues.Get(name)
}

// QueryFormResponse queries the "form_response" edge of the History_Answer entity.
func (ha *History_Answer) QueryFormResponse() *FormResponseQuery {
	return NewHistoryAnswerClient(ha.config).QueryFormResponse(ha)
}

// QueryQuestion queries the "question" edge of the History_Answer entity.
func (ha *History_Answer) QueryQuestion() *QuestionsQuery {
	return NewHistoryAnswerClient(ha.config).QueryQuestion(ha)
}

// Update returns a builder for updating this History_Answer.
// Note that you need to call History_Answer.Unwrap() before calling this method if this History_Answer
// was returned from a transaction, and the transaction was committed or rolled back.
func (ha *History_Answer) Update() *HistoryAnswerUpdateOne {
	return NewHistoryAnswerClient(ha.config).UpdateOne(ha)
}

// Unwrap unwraps the History_Answer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ha *History_Answer) Unwrap() *History_Answer {
	_tx, ok := ha.config.driver.(*txDriver)
	if !ok {
		panic("ent: History_Answer is not a transactional entity")
	}
	ha.config.driver = _tx.drv
	return ha
}

// String implements the fmt.Stringer.
func (ha *History_Answer) String() string {
	var builder strings.Builder
	builder.WriteString("History_Answer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ha.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ha.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ha.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ha.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("form_response_id=")
	builder.WriteString(fmt.Sprintf("%v", ha.FormResponseID))
	builder.WriteString(", ")
	builder.WriteString("question_id=")
	builder.WriteString(fmt.Sprintf("%v", ha.QuestionID))
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(fmt.Sprintf("%v", ha.Answer))
	builder.WriteByte(')')
	return builder.String()
}

// History_Answers is a parsable slice of History_Answer.
type History_Answers []*History_Answer
