// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FormResponseCreate is the builder for creating a Form_Response entity.
type FormResponseCreate struct {
	config
	mutation *FormResponseMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (frc *FormResponseCreate) SetCreatedAt(t time.Time) *FormResponseCreate {
	frc.mutation.SetCreatedAt(t)
	return frc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (frc *FormResponseCreate) SetNillableCreatedAt(t *time.Time) *FormResponseCreate {
	if t != nil {
		frc.SetCreatedAt(*t)
	}
	return frc
}

// SetUpdatedAt sets the "updated_at" field.
func (frc *FormResponseCreate) SetUpdatedAt(t time.Time) *FormResponseCreate {
	frc.mutation.SetUpdatedAt(t)
	return frc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (frc *FormResponseCreate) SetNillableUpdatedAt(t *time.Time) *FormResponseCreate {
	if t != nil {
		frc.SetUpdatedAt(*t)
	}
	return frc
}

// SetDeletedAt sets the "deleted_at" field.
func (frc *FormResponseCreate) SetDeletedAt(t time.Time) *FormResponseCreate {
	frc.mutation.SetDeletedAt(t)
	return frc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (frc *FormResponseCreate) SetNillableDeletedAt(t *time.Time) *FormResponseCreate {
	if t != nil {
		frc.SetDeletedAt(*t)
	}
	return frc
}

// SetUserID sets the "user_id" field.
func (frc *FormResponseCreate) SetUserID(u uuid.UUID) *FormResponseCreate {
	frc.mutation.SetUserID(u)
	return frc
}

// SetTotalScore sets the "total_score" field.
func (frc *FormResponseCreate) SetTotalScore(u uint8) *FormResponseCreate {
	frc.mutation.SetTotalScore(u)
	return frc
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (frc *FormResponseCreate) SetNillableTotalScore(u *uint8) *FormResponseCreate {
	if u != nil {
		frc.SetTotalScore(*u)
	}
	return frc
}

// SetDepressionLevel sets the "depression_level" field.
func (frc *FormResponseCreate) SetDepressionLevel(s string) *FormResponseCreate {
	frc.mutation.SetDepressionLevel(s)
	return frc
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by IDs.
func (frc *FormResponseCreate) AddHistoryAnswerIDs(ids ...int) *FormResponseCreate {
	frc.mutation.AddHistoryAnswerIDs(ids...)
	return frc
}

// AddHistoryAnswers adds the "history_answers" edges to the History_Answer entity.
func (frc *FormResponseCreate) AddHistoryAnswers(h ...*History_Answer) *FormResponseCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return frc.AddHistoryAnswerIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (frc *FormResponseCreate) SetUser(u *User) *FormResponseCreate {
	return frc.SetUserID(u.ID)
}

// Mutation returns the FormResponseMutation object of the builder.
func (frc *FormResponseCreate) Mutation() *FormResponseMutation {
	return frc.mutation
}

// Save creates the Form_Response in the database.
func (frc *FormResponseCreate) Save(ctx context.Context) (*Form_Response, error) {
	frc.defaults()
	return withHooks(ctx, frc.sqlSave, frc.mutation, frc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FormResponseCreate) SaveX(ctx context.Context) *Form_Response {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FormResponseCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FormResponseCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (frc *FormResponseCreate) defaults() {
	if _, ok := frc.mutation.CreatedAt(); !ok {
		v := form_response.DefaultCreatedAt()
		frc.mutation.SetCreatedAt(v)
	}
	if _, ok := frc.mutation.UpdatedAt(); !ok {
		v := form_response.DefaultUpdatedAt()
		frc.mutation.SetUpdatedAt(v)
	}
	if _, ok := frc.mutation.TotalScore(); !ok {
		v := form_response.DefaultTotalScore
		frc.mutation.SetTotalScore(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (frc *FormResponseCreate) check() error {
	if _, ok := frc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Form_Response.created_at"`)}
	}
	if _, ok := frc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Form_Response.updated_at"`)}
	}
	if _, ok := frc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Form_Response.user_id"`)}
	}
	if _, ok := frc.mutation.TotalScore(); !ok {
		return &ValidationError{Name: "total_score", err: errors.New(`ent: missing required field "Form_Response.total_score"`)}
	}
	if v, ok := frc.mutation.TotalScore(); ok {
		if err := form_response.TotalScoreValidator(v); err != nil {
			return &ValidationError{Name: "total_score", err: fmt.Errorf(`ent: validator failed for field "Form_Response.total_score": %w`, err)}
		}
	}
	if _, ok := frc.mutation.DepressionLevel(); !ok {
		return &ValidationError{Name: "depression_level", err: errors.New(`ent: missing required field "Form_Response.depression_level"`)}
	}
	if v, ok := frc.mutation.DepressionLevel(); ok {
		if err := form_response.DepressionLevelValidator(v); err != nil {
			return &ValidationError{Name: "depression_level", err: fmt.Errorf(`ent: validator failed for field "Form_Response.depression_level": %w`, err)}
		}
	}
	if _, ok := frc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Form_Response.user"`)}
	}
	return nil
}

func (frc *FormResponseCreate) sqlSave(ctx context.Context) (*Form_Response, error) {
	if err := frc.check(); err != nil {
		return nil, err
	}
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	frc.mutation.id = &_node.ID
	frc.mutation.done = true
	return _node, nil
}

func (frc *FormResponseCreate) createSpec() (*Form_Response, *sqlgraph.CreateSpec) {
	var (
		_node = &Form_Response{config: frc.config}
		_spec = sqlgraph.NewCreateSpec(form_response.Table, sqlgraph.NewFieldSpec(form_response.FieldID, field.TypeInt))
	)
	if value, ok := frc.mutation.CreatedAt(); ok {
		_spec.SetField(form_response.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := frc.mutation.UpdatedAt(); ok {
		_spec.SetField(form_response.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := frc.mutation.DeletedAt(); ok {
		_spec.SetField(form_response.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := frc.mutation.TotalScore(); ok {
		_spec.SetField(form_response.FieldTotalScore, field.TypeUint8, value)
		_node.TotalScore = value
	}
	if value, ok := frc.mutation.DepressionLevel(); ok {
		_spec.SetField(form_response.FieldDepressionLevel, field.TypeString, value)
		_node.DepressionLevel = value
	}
	if nodes := frc.mutation.HistoryAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form_response.HistoryAnswersTable,
			Columns: []string{form_response.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := frc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form_response.UserTable,
			Columns: []string{form_response.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FormResponseCreateBulk is the builder for creating many Form_Response entities in bulk.
type FormResponseCreateBulk struct {
	config
	err      error
	builders []*FormResponseCreate
}

// Save creates the Form_Response entities in the database.
func (frcb *FormResponseCreateBulk) Save(ctx context.Context) ([]*Form_Response, error) {
	if frcb.err != nil {
		return nil, frcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*Form_Response, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FormResponseCreateBulk) SaveX(ctx context.Context) []*Form_Response {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FormResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FormResponseCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}
