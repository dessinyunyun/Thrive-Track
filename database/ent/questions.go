// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-gin/database/ent/questions"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Questions is the model entity for the Questions schema.
type Questions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionsQuery when eager-loading is set.
	Edges        QuestionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuestionsEdges holds the relations/edges for other nodes in the graph.
type QuestionsEdges struct {
	// HistoryAnswers holds the value of the history_answers edge.
	HistoryAnswers []*History_Answer `json:"history_answers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HistoryAnswersOrErr returns the HistoryAnswers value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionsEdges) HistoryAnswersOrErr() ([]*History_Answer, error) {
	if e.loadedTypes[0] {
		return e.HistoryAnswers, nil
	}
	return nil, &NotLoadedError{edge: "history_answers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Questions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questions.FieldID, questions.FieldOrder:
			values[i] = new(sql.NullInt64)
		case questions.FieldText, questions.FieldLanguage, questions.FieldDescription:
			values[i] = new(sql.NullString)
		case questions.FieldCreatedAt, questions.FieldUpdatedAt, questions.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Questions fields.
func (q *Questions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case questions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case questions.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case questions.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				q.DeletedAt = new(time.Time)
				*q.DeletedAt = value.Time
			}
		case questions.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				q.Text = value.String
			}
		case questions.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				q.Language = value.String
			}
		case questions.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				q.Description = value.String
			}
		case questions.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				q.Order = int(value.Int64)
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Questions.
// This includes values selected through modifiers, order, etc.
func (q *Questions) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryHistoryAnswers queries the "history_answers" edge of the Questions entity.
func (q *Questions) QueryHistoryAnswers() *HistoryAnswerQuery {
	return NewQuestionsClient(q.config).QueryHistoryAnswers(q)
}

// Update returns a builder for updating this Questions.
// Note that you need to call Questions.Unwrap() before calling this method if this Questions
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Questions) Update() *QuestionsUpdateOne {
	return NewQuestionsClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Questions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Questions) Unwrap() *Questions {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Questions is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Questions) String() string {
	var builder strings.Builder
	builder.WriteString("Questions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := q.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(q.Text)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(q.Language)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(q.Description)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", q.Order))
	builder.WriteByte(')')
	return builder.String()
}

// QuestionsSlice is a parsable slice of Questions.
type QuestionsSlice []*Questions
