// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/predicate"
	"go-gin/database/ent/question"
	"go-gin/database/ent/question_category"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetDeletedAt sets the "deleted_at" field.
func (qu *QuestionUpdate) SetDeletedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetDeletedAt(t)
	return qu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableDeletedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetDeletedAt(*t)
	}
	return qu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qu *QuestionUpdate) ClearDeletedAt() *QuestionUpdate {
	qu.mutation.ClearDeletedAt()
	return qu
}

// SetText sets the "text" field.
func (qu *QuestionUpdate) SetText(s string) *QuestionUpdate {
	qu.mutation.SetText(s)
	return qu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableText(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetText(*s)
	}
	return qu
}

// SetLanguage sets the "language" field.
func (qu *QuestionUpdate) SetLanguage(s string) *QuestionUpdate {
	qu.mutation.SetLanguage(s)
	return qu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableLanguage(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetLanguage(*s)
	}
	return qu
}

// SetDescription sets the "description" field.
func (qu *QuestionUpdate) SetDescription(s string) *QuestionUpdate {
	qu.mutation.SetDescription(s)
	return qu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableDescription(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetDescription(*s)
	}
	return qu
}

// SetExample sets the "example" field.
func (qu *QuestionUpdate) SetExample(s string) *QuestionUpdate {
	qu.mutation.SetExample(s)
	return qu
}

// SetNillableExample sets the "example" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableExample(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetExample(*s)
	}
	return qu
}

// SetOrder sets the "order" field.
func (qu *QuestionUpdate) SetOrder(i int) *QuestionUpdate {
	qu.mutation.ResetOrder()
	qu.mutation.SetOrder(i)
	return qu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableOrder(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetOrder(*i)
	}
	return qu
}

// AddOrder adds i to the "order" field.
func (qu *QuestionUpdate) AddOrder(i int) *QuestionUpdate {
	qu.mutation.AddOrder(i)
	return qu
}

// SetCategoryID sets the "category_id" field.
func (qu *QuestionUpdate) SetCategoryID(i int) *QuestionUpdate {
	qu.mutation.SetCategoryID(i)
	return qu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableCategoryID(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetCategoryID(*i)
	}
	return qu
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by IDs.
func (qu *QuestionUpdate) AddHistoryAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddHistoryAnswerIDs(ids...)
	return qu
}

// AddHistoryAnswers adds the "history_answers" edges to the History_Answer entity.
func (qu *QuestionUpdate) AddHistoryAnswers(h ...*History_Answer) *QuestionUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return qu.AddHistoryAnswerIDs(ids...)
}

// SetCategory sets the "category" edge to the Question_Category entity.
func (qu *QuestionUpdate) SetCategory(q *Question_Category) *QuestionUpdate {
	return qu.SetCategoryID(q.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearHistoryAnswers clears all "history_answers" edges to the History_Answer entity.
func (qu *QuestionUpdate) ClearHistoryAnswers() *QuestionUpdate {
	qu.mutation.ClearHistoryAnswers()
	return qu
}

// RemoveHistoryAnswerIDs removes the "history_answers" edge to History_Answer entities by IDs.
func (qu *QuestionUpdate) RemoveHistoryAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveHistoryAnswerIDs(ids...)
	return qu
}

// RemoveHistoryAnswers removes "history_answers" edges to History_Answer entities.
func (qu *QuestionUpdate) RemoveHistoryAnswers(h ...*History_Answer) *QuestionUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return qu.RemoveHistoryAnswerIDs(ids...)
}

// ClearCategory clears the "category" edge to the Question_Category entity.
func (qu *QuestionUpdate) ClearCategory() *QuestionUpdate {
	qu.mutation.ClearCategory()
	return qu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	qu.defaults()
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestionUpdate) defaults() {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestionUpdate) check() error {
	if v, ok := qu.mutation.Text(); ok {
		if err := question.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Question.text": %w`, err)}
		}
	}
	if v, ok := qu.mutation.Language(); ok {
		if err := question.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Question.language": %w`, err)}
		}
	}
	if qu.mutation.CategoryCleared() && len(qu.mutation.CategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.category"`)
	}
	return nil
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.DeletedAt(); ok {
		_spec.SetField(question.FieldDeletedAt, field.TypeTime, value)
	}
	if qu.mutation.DeletedAtCleared() {
		_spec.ClearField(question.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := qu.mutation.Text(); ok {
		_spec.SetField(question.FieldText, field.TypeString, value)
	}
	if value, ok := qu.mutation.Language(); ok {
		_spec.SetField(question.FieldLanguage, field.TypeString, value)
	}
	if value, ok := qu.mutation.Description(); ok {
		_spec.SetField(question.FieldDescription, field.TypeString, value)
	}
	if value, ok := qu.mutation.Example(); ok {
		_spec.SetField(question.FieldExample, field.TypeString, value)
	}
	if value, ok := qu.mutation.Order(); ok {
		_spec.SetField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedOrder(); ok {
		_spec.AddField(question.FieldOrder, field.TypeInt, value)
	}
	if qu.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.HistoryAnswersTable,
			Columns: []string{question.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedHistoryAnswersIDs(); len(nodes) > 0 && !qu.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.HistoryAnswersTable,
			Columns: []string{question.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.HistoryAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.HistoryAnswersTable,
			Columns: []string{question.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CategoryTable,
			Columns: []string{question.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question_category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CategoryTable,
			Columns: []string{question.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question_category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetDeletedAt sets the "deleted_at" field.
func (quo *QuestionUpdateOne) SetDeletedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetDeletedAt(t)
	return quo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableDeletedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetDeletedAt(*t)
	}
	return quo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (quo *QuestionUpdateOne) ClearDeletedAt() *QuestionUpdateOne {
	quo.mutation.ClearDeletedAt()
	return quo
}

// SetText sets the "text" field.
func (quo *QuestionUpdateOne) SetText(s string) *QuestionUpdateOne {
	quo.mutation.SetText(s)
	return quo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableText(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetText(*s)
	}
	return quo
}

// SetLanguage sets the "language" field.
func (quo *QuestionUpdateOne) SetLanguage(s string) *QuestionUpdateOne {
	quo.mutation.SetLanguage(s)
	return quo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableLanguage(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetLanguage(*s)
	}
	return quo
}

// SetDescription sets the "description" field.
func (quo *QuestionUpdateOne) SetDescription(s string) *QuestionUpdateOne {
	quo.mutation.SetDescription(s)
	return quo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableDescription(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetDescription(*s)
	}
	return quo
}

// SetExample sets the "example" field.
func (quo *QuestionUpdateOne) SetExample(s string) *QuestionUpdateOne {
	quo.mutation.SetExample(s)
	return quo
}

// SetNillableExample sets the "example" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableExample(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetExample(*s)
	}
	return quo
}

// SetOrder sets the "order" field.
func (quo *QuestionUpdateOne) SetOrder(i int) *QuestionUpdateOne {
	quo.mutation.ResetOrder()
	quo.mutation.SetOrder(i)
	return quo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableOrder(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetOrder(*i)
	}
	return quo
}

// AddOrder adds i to the "order" field.
func (quo *QuestionUpdateOne) AddOrder(i int) *QuestionUpdateOne {
	quo.mutation.AddOrder(i)
	return quo
}

// SetCategoryID sets the "category_id" field.
func (quo *QuestionUpdateOne) SetCategoryID(i int) *QuestionUpdateOne {
	quo.mutation.SetCategoryID(i)
	return quo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableCategoryID(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetCategoryID(*i)
	}
	return quo
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by IDs.
func (quo *QuestionUpdateOne) AddHistoryAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddHistoryAnswerIDs(ids...)
	return quo
}

// AddHistoryAnswers adds the "history_answers" edges to the History_Answer entity.
func (quo *QuestionUpdateOne) AddHistoryAnswers(h ...*History_Answer) *QuestionUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return quo.AddHistoryAnswerIDs(ids...)
}

// SetCategory sets the "category" edge to the Question_Category entity.
func (quo *QuestionUpdateOne) SetCategory(q *Question_Category) *QuestionUpdateOne {
	return quo.SetCategoryID(q.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearHistoryAnswers clears all "history_answers" edges to the History_Answer entity.
func (quo *QuestionUpdateOne) ClearHistoryAnswers() *QuestionUpdateOne {
	quo.mutation.ClearHistoryAnswers()
	return quo
}

// RemoveHistoryAnswerIDs removes the "history_answers" edge to History_Answer entities by IDs.
func (quo *QuestionUpdateOne) RemoveHistoryAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveHistoryAnswerIDs(ids...)
	return quo
}

// RemoveHistoryAnswers removes "history_answers" edges to History_Answer entities.
func (quo *QuestionUpdateOne) RemoveHistoryAnswers(h ...*History_Answer) *QuestionUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return quo.RemoveHistoryAnswerIDs(ids...)
}

// ClearCategory clears the "category" edge to the Question_Category entity.
func (quo *QuestionUpdateOne) ClearCategory() *QuestionUpdateOne {
	quo.mutation.ClearCategory()
	return quo
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	quo.defaults()
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestionUpdateOne) defaults() {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestionUpdateOne) check() error {
	if v, ok := quo.mutation.Text(); ok {
		if err := question.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Question.text": %w`, err)}
		}
	}
	if v, ok := quo.mutation.Language(); ok {
		if err := question.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Question.language": %w`, err)}
		}
	}
	if quo.mutation.CategoryCleared() && len(quo.mutation.CategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Question.category"`)
	}
	return nil
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.DeletedAt(); ok {
		_spec.SetField(question.FieldDeletedAt, field.TypeTime, value)
	}
	if quo.mutation.DeletedAtCleared() {
		_spec.ClearField(question.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := quo.mutation.Text(); ok {
		_spec.SetField(question.FieldText, field.TypeString, value)
	}
	if value, ok := quo.mutation.Language(); ok {
		_spec.SetField(question.FieldLanguage, field.TypeString, value)
	}
	if value, ok := quo.mutation.Description(); ok {
		_spec.SetField(question.FieldDescription, field.TypeString, value)
	}
	if value, ok := quo.mutation.Example(); ok {
		_spec.SetField(question.FieldExample, field.TypeString, value)
	}
	if value, ok := quo.mutation.Order(); ok {
		_spec.SetField(question.FieldOrder, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedOrder(); ok {
		_spec.AddField(question.FieldOrder, field.TypeInt, value)
	}
	if quo.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.HistoryAnswersTable,
			Columns: []string{question.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedHistoryAnswersIDs(); len(nodes) > 0 && !quo.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.HistoryAnswersTable,
			Columns: []string{question.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.HistoryAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.HistoryAnswersTable,
			Columns: []string{question.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CategoryTable,
			Columns: []string{question.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question_category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CategoryTable,
			Columns: []string{question.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question_category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
