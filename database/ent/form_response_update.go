// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/form_response"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/predicate"
	"go-gin/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FormResponseUpdate is the builder for updating Form_Response entities.
type FormResponseUpdate struct {
	config
	hooks    []Hook
	mutation *FormResponseMutation
}

// Where appends a list predicates to the FormResponseUpdate builder.
func (fru *FormResponseUpdate) Where(ps ...predicate.Form_Response) *FormResponseUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// SetUpdatedAt sets the "updated_at" field.
func (fru *FormResponseUpdate) SetUpdatedAt(t time.Time) *FormResponseUpdate {
	fru.mutation.SetUpdatedAt(t)
	return fru
}

// SetDeletedAt sets the "deleted_at" field.
func (fru *FormResponseUpdate) SetDeletedAt(t time.Time) *FormResponseUpdate {
	fru.mutation.SetDeletedAt(t)
	return fru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fru *FormResponseUpdate) SetNillableDeletedAt(t *time.Time) *FormResponseUpdate {
	if t != nil {
		fru.SetDeletedAt(*t)
	}
	return fru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fru *FormResponseUpdate) ClearDeletedAt() *FormResponseUpdate {
	fru.mutation.ClearDeletedAt()
	return fru
}

// SetUserID sets the "user_id" field.
func (fru *FormResponseUpdate) SetUserID(u uuid.UUID) *FormResponseUpdate {
	fru.mutation.SetUserID(u)
	return fru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fru *FormResponseUpdate) SetNillableUserID(u *uuid.UUID) *FormResponseUpdate {
	if u != nil {
		fru.SetUserID(*u)
	}
	return fru
}

// SetTotalScore sets the "total_score" field.
func (fru *FormResponseUpdate) SetTotalScore(u uint8) *FormResponseUpdate {
	fru.mutation.ResetTotalScore()
	fru.mutation.SetTotalScore(u)
	return fru
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (fru *FormResponseUpdate) SetNillableTotalScore(u *uint8) *FormResponseUpdate {
	if u != nil {
		fru.SetTotalScore(*u)
	}
	return fru
}

// AddTotalScore adds u to the "total_score" field.
func (fru *FormResponseUpdate) AddTotalScore(u int8) *FormResponseUpdate {
	fru.mutation.AddTotalScore(u)
	return fru
}

// SetDepressionLevel sets the "depression_level" field.
func (fru *FormResponseUpdate) SetDepressionLevel(s string) *FormResponseUpdate {
	fru.mutation.SetDepressionLevel(s)
	return fru
}

// SetNillableDepressionLevel sets the "depression_level" field if the given value is not nil.
func (fru *FormResponseUpdate) SetNillableDepressionLevel(s *string) *FormResponseUpdate {
	if s != nil {
		fru.SetDepressionLevel(*s)
	}
	return fru
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by IDs.
func (fru *FormResponseUpdate) AddHistoryAnswerIDs(ids ...int) *FormResponseUpdate {
	fru.mutation.AddHistoryAnswerIDs(ids...)
	return fru
}

// AddHistoryAnswers adds the "history_answers" edges to the History_Answer entity.
func (fru *FormResponseUpdate) AddHistoryAnswers(h ...*History_Answer) *FormResponseUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fru.AddHistoryAnswerIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (fru *FormResponseUpdate) SetUser(u *User) *FormResponseUpdate {
	return fru.SetUserID(u.ID)
}

// Mutation returns the FormResponseMutation object of the builder.
func (fru *FormResponseUpdate) Mutation() *FormResponseMutation {
	return fru.mutation
}

// ClearHistoryAnswers clears all "history_answers" edges to the History_Answer entity.
func (fru *FormResponseUpdate) ClearHistoryAnswers() *FormResponseUpdate {
	fru.mutation.ClearHistoryAnswers()
	return fru
}

// RemoveHistoryAnswerIDs removes the "history_answers" edge to History_Answer entities by IDs.
func (fru *FormResponseUpdate) RemoveHistoryAnswerIDs(ids ...int) *FormResponseUpdate {
	fru.mutation.RemoveHistoryAnswerIDs(ids...)
	return fru
}

// RemoveHistoryAnswers removes "history_answers" edges to History_Answer entities.
func (fru *FormResponseUpdate) RemoveHistoryAnswers(h ...*History_Answer) *FormResponseUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fru.RemoveHistoryAnswerIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (fru *FormResponseUpdate) ClearUser() *FormResponseUpdate {
	fru.mutation.ClearUser()
	return fru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FormResponseUpdate) Save(ctx context.Context) (int, error) {
	fru.defaults()
	return withHooks(ctx, fru.sqlSave, fru.mutation, fru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FormResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FormResponseUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FormResponseUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fru *FormResponseUpdate) defaults() {
	if _, ok := fru.mutation.UpdatedAt(); !ok {
		v := form_response.UpdateDefaultUpdatedAt()
		fru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fru *FormResponseUpdate) check() error {
	if v, ok := fru.mutation.TotalScore(); ok {
		if err := form_response.TotalScoreValidator(v); err != nil {
			return &ValidationError{Name: "total_score", err: fmt.Errorf(`ent: validator failed for field "Form_Response.total_score": %w`, err)}
		}
	}
	if v, ok := fru.mutation.DepressionLevel(); ok {
		if err := form_response.DepressionLevelValidator(v); err != nil {
			return &ValidationError{Name: "depression_level", err: fmt.Errorf(`ent: validator failed for field "Form_Response.depression_level": %w`, err)}
		}
	}
	if fru.mutation.UserCleared() && len(fru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Form_Response.user"`)
	}
	return nil
}

func (fru *FormResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(form_response.Table, form_response.Columns, sqlgraph.NewFieldSpec(form_response.FieldID, field.TypeInt))
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fru.mutation.UpdatedAt(); ok {
		_spec.SetField(form_response.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fru.mutation.DeletedAt(); ok {
		_spec.SetField(form_response.FieldDeletedAt, field.TypeTime, value)
	}
	if fru.mutation.DeletedAtCleared() {
		_spec.ClearField(form_response.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fru.mutation.TotalScore(); ok {
		_spec.SetField(form_response.FieldTotalScore, field.TypeUint8, value)
	}
	if value, ok := fru.mutation.AddedTotalScore(); ok {
		_spec.AddField(form_response.FieldTotalScore, field.TypeUint8, value)
	}
	if value, ok := fru.mutation.DepressionLevel(); ok {
		_spec.SetField(form_response.FieldDepressionLevel, field.TypeString, value)
	}
	if fru.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form_response.HistoryAnswersTable,
			Columns: []string{form_response.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fru.mutation.RemovedHistoryAnswersIDs(); len(nodes) > 0 && !fru.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form_response.HistoryAnswersTable,
			Columns: []string{form_response.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fru.mutation.HistoryAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form_response.HistoryAnswersTable,
			Columns: []string{form_response.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form_response.UserTable,
			Columns: []string{form_response.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form_response.UserTable,
			Columns: []string{form_response.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{form_response.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fru.mutation.done = true
	return n, nil
}

// FormResponseUpdateOne is the builder for updating a single Form_Response entity.
type FormResponseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FormResponseMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fruo *FormResponseUpdateOne) SetUpdatedAt(t time.Time) *FormResponseUpdateOne {
	fruo.mutation.SetUpdatedAt(t)
	return fruo
}

// SetDeletedAt sets the "deleted_at" field.
func (fruo *FormResponseUpdateOne) SetDeletedAt(t time.Time) *FormResponseUpdateOne {
	fruo.mutation.SetDeletedAt(t)
	return fruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fruo *FormResponseUpdateOne) SetNillableDeletedAt(t *time.Time) *FormResponseUpdateOne {
	if t != nil {
		fruo.SetDeletedAt(*t)
	}
	return fruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fruo *FormResponseUpdateOne) ClearDeletedAt() *FormResponseUpdateOne {
	fruo.mutation.ClearDeletedAt()
	return fruo
}

// SetUserID sets the "user_id" field.
func (fruo *FormResponseUpdateOne) SetUserID(u uuid.UUID) *FormResponseUpdateOne {
	fruo.mutation.SetUserID(u)
	return fruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fruo *FormResponseUpdateOne) SetNillableUserID(u *uuid.UUID) *FormResponseUpdateOne {
	if u != nil {
		fruo.SetUserID(*u)
	}
	return fruo
}

// SetTotalScore sets the "total_score" field.
func (fruo *FormResponseUpdateOne) SetTotalScore(u uint8) *FormResponseUpdateOne {
	fruo.mutation.ResetTotalScore()
	fruo.mutation.SetTotalScore(u)
	return fruo
}

// SetNillableTotalScore sets the "total_score" field if the given value is not nil.
func (fruo *FormResponseUpdateOne) SetNillableTotalScore(u *uint8) *FormResponseUpdateOne {
	if u != nil {
		fruo.SetTotalScore(*u)
	}
	return fruo
}

// AddTotalScore adds u to the "total_score" field.
func (fruo *FormResponseUpdateOne) AddTotalScore(u int8) *FormResponseUpdateOne {
	fruo.mutation.AddTotalScore(u)
	return fruo
}

// SetDepressionLevel sets the "depression_level" field.
func (fruo *FormResponseUpdateOne) SetDepressionLevel(s string) *FormResponseUpdateOne {
	fruo.mutation.SetDepressionLevel(s)
	return fruo
}

// SetNillableDepressionLevel sets the "depression_level" field if the given value is not nil.
func (fruo *FormResponseUpdateOne) SetNillableDepressionLevel(s *string) *FormResponseUpdateOne {
	if s != nil {
		fruo.SetDepressionLevel(*s)
	}
	return fruo
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by IDs.
func (fruo *FormResponseUpdateOne) AddHistoryAnswerIDs(ids ...int) *FormResponseUpdateOne {
	fruo.mutation.AddHistoryAnswerIDs(ids...)
	return fruo
}

// AddHistoryAnswers adds the "history_answers" edges to the History_Answer entity.
func (fruo *FormResponseUpdateOne) AddHistoryAnswers(h ...*History_Answer) *FormResponseUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fruo.AddHistoryAnswerIDs(ids...)
}

// SetUser sets the "user" edge to the User entity.
func (fruo *FormResponseUpdateOne) SetUser(u *User) *FormResponseUpdateOne {
	return fruo.SetUserID(u.ID)
}

// Mutation returns the FormResponseMutation object of the builder.
func (fruo *FormResponseUpdateOne) Mutation() *FormResponseMutation {
	return fruo.mutation
}

// ClearHistoryAnswers clears all "history_answers" edges to the History_Answer entity.
func (fruo *FormResponseUpdateOne) ClearHistoryAnswers() *FormResponseUpdateOne {
	fruo.mutation.ClearHistoryAnswers()
	return fruo
}

// RemoveHistoryAnswerIDs removes the "history_answers" edge to History_Answer entities by IDs.
func (fruo *FormResponseUpdateOne) RemoveHistoryAnswerIDs(ids ...int) *FormResponseUpdateOne {
	fruo.mutation.RemoveHistoryAnswerIDs(ids...)
	return fruo
}

// RemoveHistoryAnswers removes "history_answers" edges to History_Answer entities.
func (fruo *FormResponseUpdateOne) RemoveHistoryAnswers(h ...*History_Answer) *FormResponseUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fruo.RemoveHistoryAnswerIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (fruo *FormResponseUpdateOne) ClearUser() *FormResponseUpdateOne {
	fruo.mutation.ClearUser()
	return fruo
}

// Where appends a list predicates to the FormResponseUpdate builder.
func (fruo *FormResponseUpdateOne) Where(ps ...predicate.Form_Response) *FormResponseUpdateOne {
	fruo.mutation.Where(ps...)
	return fruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FormResponseUpdateOne) Select(field string, fields ...string) *FormResponseUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated Form_Response entity.
func (fruo *FormResponseUpdateOne) Save(ctx context.Context) (*Form_Response, error) {
	fruo.defaults()
	return withHooks(ctx, fruo.sqlSave, fruo.mutation, fruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FormResponseUpdateOne) SaveX(ctx context.Context) *Form_Response {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FormResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FormResponseUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fruo *FormResponseUpdateOne) defaults() {
	if _, ok := fruo.mutation.UpdatedAt(); !ok {
		v := form_response.UpdateDefaultUpdatedAt()
		fruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fruo *FormResponseUpdateOne) check() error {
	if v, ok := fruo.mutation.TotalScore(); ok {
		if err := form_response.TotalScoreValidator(v); err != nil {
			return &ValidationError{Name: "total_score", err: fmt.Errorf(`ent: validator failed for field "Form_Response.total_score": %w`, err)}
		}
	}
	if v, ok := fruo.mutation.DepressionLevel(); ok {
		if err := form_response.DepressionLevelValidator(v); err != nil {
			return &ValidationError{Name: "depression_level", err: fmt.Errorf(`ent: validator failed for field "Form_Response.depression_level": %w`, err)}
		}
	}
	if fruo.mutation.UserCleared() && len(fruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Form_Response.user"`)
	}
	return nil
}

func (fruo *FormResponseUpdateOne) sqlSave(ctx context.Context) (_node *Form_Response, err error) {
	if err := fruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(form_response.Table, form_response.Columns, sqlgraph.NewFieldSpec(form_response.FieldID, field.TypeInt))
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Form_Response.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, form_response.FieldID)
		for _, f := range fields {
			if !form_response.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != form_response.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fruo.mutation.UpdatedAt(); ok {
		_spec.SetField(form_response.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fruo.mutation.DeletedAt(); ok {
		_spec.SetField(form_response.FieldDeletedAt, field.TypeTime, value)
	}
	if fruo.mutation.DeletedAtCleared() {
		_spec.ClearField(form_response.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fruo.mutation.TotalScore(); ok {
		_spec.SetField(form_response.FieldTotalScore, field.TypeUint8, value)
	}
	if value, ok := fruo.mutation.AddedTotalScore(); ok {
		_spec.AddField(form_response.FieldTotalScore, field.TypeUint8, value)
	}
	if value, ok := fruo.mutation.DepressionLevel(); ok {
		_spec.SetField(form_response.FieldDepressionLevel, field.TypeString, value)
	}
	if fruo.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form_response.HistoryAnswersTable,
			Columns: []string{form_response.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fruo.mutation.RemovedHistoryAnswersIDs(); len(nodes) > 0 && !fruo.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form_response.HistoryAnswersTable,
			Columns: []string{form_response.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fruo.mutation.HistoryAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   form_response.HistoryAnswersTable,
			Columns: []string{form_response.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form_response.UserTable,
			Columns: []string{form_response.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form_response.UserTable,
			Columns: []string{form_response.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Form_Response{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{form_response.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fruo.mutation.done = true
	return _node, nil
}
