// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HistoryAnswerDelete is the builder for deleting a History_Answer entity.
type HistoryAnswerDelete struct {
	config
	hooks    []Hook
	mutation *HistoryAnswerMutation
}

// Where appends a list predicates to the HistoryAnswerDelete builder.
func (had *HistoryAnswerDelete) Where(ps ...predicate.History_Answer) *HistoryAnswerDelete {
	had.mutation.Where(ps...)
	return had
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (had *HistoryAnswerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, had.sqlExec, had.mutation, had.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (had *HistoryAnswerDelete) ExecX(ctx context.Context) int {
	n, err := had.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (had *HistoryAnswerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(history_answer.Table, sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt))
	if ps := had.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, had.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	had.mutation.done = true
	return affected, err
}

// HistoryAnswerDeleteOne is the builder for deleting a single History_Answer entity.
type HistoryAnswerDeleteOne struct {
	had *HistoryAnswerDelete
}

// Where appends a list predicates to the HistoryAnswerDelete builder.
func (hado *HistoryAnswerDeleteOne) Where(ps ...predicate.History_Answer) *HistoryAnswerDeleteOne {
	hado.had.mutation.Where(ps...)
	return hado
}

// Exec executes the deletion query.
func (hado *HistoryAnswerDeleteOne) Exec(ctx context.Context) error {
	n, err := hado.had.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{history_answer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hado *HistoryAnswerDeleteOne) ExecX(ctx context.Context) {
	if err := hado.Exec(ctx); err != nil {
		panic(err)
	}
}
