// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gin/database/ent/history_answer"
	"go-gin/database/ent/predicate"
	"go-gin/database/ent/questions"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionsUpdate is the builder for updating Questions entities.
type QuestionsUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionsMutation
}

// Where appends a list predicates to the QuestionsUpdate builder.
func (qu *QuestionsUpdate) Where(ps ...predicate.Questions) *QuestionsUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionsUpdate) SetUpdatedAt(t time.Time) *QuestionsUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetDeletedAt sets the "deleted_at" field.
func (qu *QuestionsUpdate) SetDeletedAt(t time.Time) *QuestionsUpdate {
	qu.mutation.SetDeletedAt(t)
	return qu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qu *QuestionsUpdate) SetNillableDeletedAt(t *time.Time) *QuestionsUpdate {
	if t != nil {
		qu.SetDeletedAt(*t)
	}
	return qu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qu *QuestionsUpdate) ClearDeletedAt() *QuestionsUpdate {
	qu.mutation.ClearDeletedAt()
	return qu
}

// SetText sets the "text" field.
func (qu *QuestionsUpdate) SetText(s string) *QuestionsUpdate {
	qu.mutation.SetText(s)
	return qu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (qu *QuestionsUpdate) SetNillableText(s *string) *QuestionsUpdate {
	if s != nil {
		qu.SetText(*s)
	}
	return qu
}

// SetLanguage sets the "language" field.
func (qu *QuestionsUpdate) SetLanguage(s string) *QuestionsUpdate {
	qu.mutation.SetLanguage(s)
	return qu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (qu *QuestionsUpdate) SetNillableLanguage(s *string) *QuestionsUpdate {
	if s != nil {
		qu.SetLanguage(*s)
	}
	return qu
}

// SetDescription sets the "description" field.
func (qu *QuestionsUpdate) SetDescription(s string) *QuestionsUpdate {
	qu.mutation.SetDescription(s)
	return qu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qu *QuestionsUpdate) SetNillableDescription(s *string) *QuestionsUpdate {
	if s != nil {
		qu.SetDescription(*s)
	}
	return qu
}

// SetOrder sets the "order" field.
func (qu *QuestionsUpdate) SetOrder(i int) *QuestionsUpdate {
	qu.mutation.ResetOrder()
	qu.mutation.SetOrder(i)
	return qu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (qu *QuestionsUpdate) SetNillableOrder(i *int) *QuestionsUpdate {
	if i != nil {
		qu.SetOrder(*i)
	}
	return qu
}

// AddOrder adds i to the "order" field.
func (qu *QuestionsUpdate) AddOrder(i int) *QuestionsUpdate {
	qu.mutation.AddOrder(i)
	return qu
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by IDs.
func (qu *QuestionsUpdate) AddHistoryAnswerIDs(ids ...int) *QuestionsUpdate {
	qu.mutation.AddHistoryAnswerIDs(ids...)
	return qu
}

// AddHistoryAnswers adds the "history_answers" edges to the History_Answer entity.
func (qu *QuestionsUpdate) AddHistoryAnswers(h ...*History_Answer) *QuestionsUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return qu.AddHistoryAnswerIDs(ids...)
}

// Mutation returns the QuestionsMutation object of the builder.
func (qu *QuestionsUpdate) Mutation() *QuestionsMutation {
	return qu.mutation
}

// ClearHistoryAnswers clears all "history_answers" edges to the History_Answer entity.
func (qu *QuestionsUpdate) ClearHistoryAnswers() *QuestionsUpdate {
	qu.mutation.ClearHistoryAnswers()
	return qu
}

// RemoveHistoryAnswerIDs removes the "history_answers" edge to History_Answer entities by IDs.
func (qu *QuestionsUpdate) RemoveHistoryAnswerIDs(ids ...int) *QuestionsUpdate {
	qu.mutation.RemoveHistoryAnswerIDs(ids...)
	return qu
}

// RemoveHistoryAnswers removes "history_answers" edges to History_Answer entities.
func (qu *QuestionsUpdate) RemoveHistoryAnswers(h ...*History_Answer) *QuestionsUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return qu.RemoveHistoryAnswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionsUpdate) Save(ctx context.Context) (int, error) {
	qu.defaults()
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionsUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionsUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionsUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestionsUpdate) defaults() {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		v := questions.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestionsUpdate) check() error {
	if v, ok := qu.mutation.Text(); ok {
		if err := questions.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Questions.text": %w`, err)}
		}
	}
	if v, ok := qu.mutation.Language(); ok {
		if err := questions.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Questions.language": %w`, err)}
		}
	}
	return nil
}

func (qu *QuestionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(questions.Table, questions.Columns, sqlgraph.NewFieldSpec(questions.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(questions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.DeletedAt(); ok {
		_spec.SetField(questions.FieldDeletedAt, field.TypeTime, value)
	}
	if qu.mutation.DeletedAtCleared() {
		_spec.ClearField(questions.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := qu.mutation.Text(); ok {
		_spec.SetField(questions.FieldText, field.TypeString, value)
	}
	if value, ok := qu.mutation.Language(); ok {
		_spec.SetField(questions.FieldLanguage, field.TypeString, value)
	}
	if value, ok := qu.mutation.Description(); ok {
		_spec.SetField(questions.FieldDescription, field.TypeString, value)
	}
	if value, ok := qu.mutation.Order(); ok {
		_spec.SetField(questions.FieldOrder, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedOrder(); ok {
		_spec.AddField(questions.FieldOrder, field.TypeInt, value)
	}
	if qu.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questions.HistoryAnswersTable,
			Columns: []string{questions.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedHistoryAnswersIDs(); len(nodes) > 0 && !qu.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questions.HistoryAnswersTable,
			Columns: []string{questions.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.HistoryAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questions.HistoryAnswersTable,
			Columns: []string{questions.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionsUpdateOne is the builder for updating a single Questions entity.
type QuestionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionsUpdateOne) SetUpdatedAt(t time.Time) *QuestionsUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetDeletedAt sets the "deleted_at" field.
func (quo *QuestionsUpdateOne) SetDeletedAt(t time.Time) *QuestionsUpdateOne {
	quo.mutation.SetDeletedAt(t)
	return quo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (quo *QuestionsUpdateOne) SetNillableDeletedAt(t *time.Time) *QuestionsUpdateOne {
	if t != nil {
		quo.SetDeletedAt(*t)
	}
	return quo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (quo *QuestionsUpdateOne) ClearDeletedAt() *QuestionsUpdateOne {
	quo.mutation.ClearDeletedAt()
	return quo
}

// SetText sets the "text" field.
func (quo *QuestionsUpdateOne) SetText(s string) *QuestionsUpdateOne {
	quo.mutation.SetText(s)
	return quo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (quo *QuestionsUpdateOne) SetNillableText(s *string) *QuestionsUpdateOne {
	if s != nil {
		quo.SetText(*s)
	}
	return quo
}

// SetLanguage sets the "language" field.
func (quo *QuestionsUpdateOne) SetLanguage(s string) *QuestionsUpdateOne {
	quo.mutation.SetLanguage(s)
	return quo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (quo *QuestionsUpdateOne) SetNillableLanguage(s *string) *QuestionsUpdateOne {
	if s != nil {
		quo.SetLanguage(*s)
	}
	return quo
}

// SetDescription sets the "description" field.
func (quo *QuestionsUpdateOne) SetDescription(s string) *QuestionsUpdateOne {
	quo.mutation.SetDescription(s)
	return quo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (quo *QuestionsUpdateOne) SetNillableDescription(s *string) *QuestionsUpdateOne {
	if s != nil {
		quo.SetDescription(*s)
	}
	return quo
}

// SetOrder sets the "order" field.
func (quo *QuestionsUpdateOne) SetOrder(i int) *QuestionsUpdateOne {
	quo.mutation.ResetOrder()
	quo.mutation.SetOrder(i)
	return quo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (quo *QuestionsUpdateOne) SetNillableOrder(i *int) *QuestionsUpdateOne {
	if i != nil {
		quo.SetOrder(*i)
	}
	return quo
}

// AddOrder adds i to the "order" field.
func (quo *QuestionsUpdateOne) AddOrder(i int) *QuestionsUpdateOne {
	quo.mutation.AddOrder(i)
	return quo
}

// AddHistoryAnswerIDs adds the "history_answers" edge to the History_Answer entity by IDs.
func (quo *QuestionsUpdateOne) AddHistoryAnswerIDs(ids ...int) *QuestionsUpdateOne {
	quo.mutation.AddHistoryAnswerIDs(ids...)
	return quo
}

// AddHistoryAnswers adds the "history_answers" edges to the History_Answer entity.
func (quo *QuestionsUpdateOne) AddHistoryAnswers(h ...*History_Answer) *QuestionsUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return quo.AddHistoryAnswerIDs(ids...)
}

// Mutation returns the QuestionsMutation object of the builder.
func (quo *QuestionsUpdateOne) Mutation() *QuestionsMutation {
	return quo.mutation
}

// ClearHistoryAnswers clears all "history_answers" edges to the History_Answer entity.
func (quo *QuestionsUpdateOne) ClearHistoryAnswers() *QuestionsUpdateOne {
	quo.mutation.ClearHistoryAnswers()
	return quo
}

// RemoveHistoryAnswerIDs removes the "history_answers" edge to History_Answer entities by IDs.
func (quo *QuestionsUpdateOne) RemoveHistoryAnswerIDs(ids ...int) *QuestionsUpdateOne {
	quo.mutation.RemoveHistoryAnswerIDs(ids...)
	return quo
}

// RemoveHistoryAnswers removes "history_answers" edges to History_Answer entities.
func (quo *QuestionsUpdateOne) RemoveHistoryAnswers(h ...*History_Answer) *QuestionsUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return quo.RemoveHistoryAnswerIDs(ids...)
}

// Where appends a list predicates to the QuestionsUpdate builder.
func (quo *QuestionsUpdateOne) Where(ps ...predicate.Questions) *QuestionsUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionsUpdateOne) Select(field string, fields ...string) *QuestionsUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Questions entity.
func (quo *QuestionsUpdateOne) Save(ctx context.Context) (*Questions, error) {
	quo.defaults()
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionsUpdateOne) SaveX(ctx context.Context) *Questions {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionsUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionsUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestionsUpdateOne) defaults() {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		v := questions.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestionsUpdateOne) check() error {
	if v, ok := quo.mutation.Text(); ok {
		if err := questions.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Questions.text": %w`, err)}
		}
	}
	if v, ok := quo.mutation.Language(); ok {
		if err := questions.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Questions.language": %w`, err)}
		}
	}
	return nil
}

func (quo *QuestionsUpdateOne) sqlSave(ctx context.Context) (_node *Questions, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(questions.Table, questions.Columns, sqlgraph.NewFieldSpec(questions.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Questions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questions.FieldID)
		for _, f := range fields {
			if !questions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != questions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(questions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.DeletedAt(); ok {
		_spec.SetField(questions.FieldDeletedAt, field.TypeTime, value)
	}
	if quo.mutation.DeletedAtCleared() {
		_spec.ClearField(questions.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := quo.mutation.Text(); ok {
		_spec.SetField(questions.FieldText, field.TypeString, value)
	}
	if value, ok := quo.mutation.Language(); ok {
		_spec.SetField(questions.FieldLanguage, field.TypeString, value)
	}
	if value, ok := quo.mutation.Description(); ok {
		_spec.SetField(questions.FieldDescription, field.TypeString, value)
	}
	if value, ok := quo.mutation.Order(); ok {
		_spec.SetField(questions.FieldOrder, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedOrder(); ok {
		_spec.AddField(questions.FieldOrder, field.TypeInt, value)
	}
	if quo.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questions.HistoryAnswersTable,
			Columns: []string{questions.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedHistoryAnswersIDs(); len(nodes) > 0 && !quo.mutation.HistoryAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questions.HistoryAnswersTable,
			Columns: []string{questions.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.HistoryAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questions.HistoryAnswersTable,
			Columns: []string{questions.HistoryAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history_answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Questions{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
