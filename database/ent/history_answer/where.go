// Code generated by ent, DO NOT EDIT.

package history_answer

import (
	"go-gin/database/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldDeletedAt, v))
}

// FormResponseID applies equality check predicate on the "form_response_id" field. It's identical to FormResponseIDEQ.
func FormResponseID(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldFormResponseID, v))
}

// QuestionID applies equality check predicate on the "question_id" field. It's identical to QuestionIDEQ.
func QuestionID(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldQuestionID, v))
}

// Answer applies equality check predicate on the "answer" field. It's identical to AnswerEQ.
func Answer(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldAnswer, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.History_Answer {
	return predicate.History_Answer(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNotNull(FieldDeletedAt))
}

// FormResponseIDEQ applies the EQ predicate on the "form_response_id" field.
func FormResponseIDEQ(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldFormResponseID, v))
}

// FormResponseIDNEQ applies the NEQ predicate on the "form_response_id" field.
func FormResponseIDNEQ(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNEQ(FieldFormResponseID, v))
}

// FormResponseIDIn applies the In predicate on the "form_response_id" field.
func FormResponseIDIn(vs ...int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldIn(FieldFormResponseID, vs...))
}

// FormResponseIDNotIn applies the NotIn predicate on the "form_response_id" field.
func FormResponseIDNotIn(vs ...int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNotIn(FieldFormResponseID, vs...))
}

// QuestionIDEQ applies the EQ predicate on the "question_id" field.
func QuestionIDEQ(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldQuestionID, v))
}

// QuestionIDNEQ applies the NEQ predicate on the "question_id" field.
func QuestionIDNEQ(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNEQ(FieldQuestionID, v))
}

// QuestionIDIn applies the In predicate on the "question_id" field.
func QuestionIDIn(vs ...int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldIn(FieldQuestionID, vs...))
}

// QuestionIDNotIn applies the NotIn predicate on the "question_id" field.
func QuestionIDNotIn(vs ...int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNotIn(FieldQuestionID, vs...))
}

// AnswerEQ applies the EQ predicate on the "answer" field.
func AnswerEQ(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldEQ(FieldAnswer, v))
}

// AnswerNEQ applies the NEQ predicate on the "answer" field.
func AnswerNEQ(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNEQ(FieldAnswer, v))
}

// AnswerIn applies the In predicate on the "answer" field.
func AnswerIn(vs ...int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldIn(FieldAnswer, vs...))
}

// AnswerNotIn applies the NotIn predicate on the "answer" field.
func AnswerNotIn(vs ...int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldNotIn(FieldAnswer, vs...))
}

// AnswerGT applies the GT predicate on the "answer" field.
func AnswerGT(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGT(FieldAnswer, v))
}

// AnswerGTE applies the GTE predicate on the "answer" field.
func AnswerGTE(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldGTE(FieldAnswer, v))
}

// AnswerLT applies the LT predicate on the "answer" field.
func AnswerLT(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLT(FieldAnswer, v))
}

// AnswerLTE applies the LTE predicate on the "answer" field.
func AnswerLTE(v int) predicate.History_Answer {
	return predicate.History_Answer(sql.FieldLTE(FieldAnswer, v))
}

// HasFormResponse applies the HasEdge predicate on the "form_response" edge.
func HasFormResponse() predicate.History_Answer {
	return predicate.History_Answer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FormResponseTable, FormResponseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormResponseWith applies the HasEdge predicate on the "form_response" edge with a given conditions (other predicates).
func HasFormResponseWith(preds ...predicate.Form_Response) predicate.History_Answer {
	return predicate.History_Answer(func(s *sql.Selector) {
		step := newFormResponseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.History_Answer {
	return predicate.History_Answer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.History_Answer {
	return predicate.History_Answer(func(s *sql.Selector) {
		step := newQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.History_Answer) predicate.History_Answer {
	return predicate.History_Answer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.History_Answer) predicate.History_Answer {
	return predicate.History_Answer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.History_Answer) predicate.History_Answer {
	return predicate.History_Answer(sql.NotPredicates(p))
}
